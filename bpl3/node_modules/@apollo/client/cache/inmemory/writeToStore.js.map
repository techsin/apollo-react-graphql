{"version":3,"file":"writeToStore.js","sources":["writeToStore.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { invariant } from 'ts-invariant';\nimport { createFragmentMap, getFragmentFromSelection, } from '../../utilities/graphql/fragments';\nimport { getDefaultValues, getFragmentDefinitions, getOperationDefinition, } from '../../utilities/graphql/getFromAST';\nimport { getTypenameFromResult, makeReference, isField, resultKeyNameFromField, } from '../../utilities/graphql/storeUtils';\nimport { shouldInclude } from '../../utilities/graphql/directives';\nimport { cloneDeep } from '../../utilities/common/cloneDeep';\nimport { defaultNormalizedCacheFactory } from './entityStore';\nimport { makeProcessedFieldsMerger } from './helpers';\n;\nvar StoreWriter = (function () {\n    function StoreWriter(config) {\n        this.policies = config.policies;\n    }\n    StoreWriter.prototype.writeQueryToStore = function (_a) {\n        var query = _a.query, result = _a.result, _b = _a.dataId, dataId = _b === void 0 ? 'ROOT_QUERY' : _b, _c = _a.store, store = _c === void 0 ? defaultNormalizedCacheFactory() : _c, variables = _a.variables;\n        var operationDefinition = getOperationDefinition(query);\n        store.retain(dataId);\n        var merger = makeProcessedFieldsMerger();\n        return this.writeSelectionSetToStore({\n            result: result || Object.create(null),\n            dataId: dataId,\n            selectionSet: operationDefinition.selectionSet,\n            context: {\n                store: store,\n                written: Object.create(null),\n                merge: function (existing, incoming) {\n                    return merger.merge(existing, incoming);\n                },\n                variables: __assign(__assign({}, getDefaultValues(operationDefinition)), variables),\n                fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n                getFieldValue: this.policies.makeFieldValueGetter(store),\n            },\n        });\n    };\n    StoreWriter.prototype.writeSelectionSetToStore = function (_a) {\n        var dataId = _a.dataId, result = _a.result, selectionSet = _a.selectionSet, context = _a.context;\n        var policies = this.policies;\n        var store = context.store, written = context.written;\n        var sets = written[dataId] || (written[dataId] = []);\n        if (sets.indexOf(selectionSet) >= 0)\n            return store;\n        sets.push(selectionSet);\n        var entityRef = makeReference(dataId);\n        var typename = getTypenameFromResult(result, selectionSet, context.fragmentMap) ||\n            context.getFieldValue(entityRef, \"__typename\");\n        store.merge(dataId, policies.applyMerges(entityRef, this.processSelectionSet({\n            result: result,\n            selectionSet: selectionSet,\n            context: context,\n            typename: typename,\n        }), context.getFieldValue, context.variables));\n        return store;\n    };\n    StoreWriter.prototype.processSelectionSet = function (_a) {\n        var _this = this;\n        var result = _a.result, selectionSet = _a.selectionSet, context = _a.context, typename = _a.typename;\n        var mergedFields = Object.create(null);\n        if (typeof typename === \"string\") {\n            mergedFields.__typename = typename;\n        }\n        selectionSet.selections.forEach(function (selection) {\n            var _a;\n            if (!shouldInclude(selection, context.variables)) {\n                return;\n            }\n            var policies = _this.policies;\n            if (isField(selection)) {\n                var resultFieldKey = resultKeyNameFromField(selection);\n                var value = result[resultFieldKey];\n                if (typeof value !== 'undefined') {\n                    var storeFieldName = policies.getStoreFieldName(typename, selection, context.variables);\n                    var incomingValue = _this.processFieldValue(value, selection, context);\n                    mergedFields = context.merge(mergedFields, (_a = {},\n                        _a[storeFieldName] = policies.hasMergeFunction(typename, selection.name.value) ? {\n                            __field: selection,\n                            __typename: typename,\n                            __value: incomingValue,\n                        } : incomingValue,\n                        _a));\n                }\n                else if (policies.usingPossibleTypes &&\n                    !(selection.directives &&\n                        selection.directives.some(function (_a) {\n                            var name = _a.name;\n                            return name && (name.value === 'defer' || name.value === 'client');\n                        }))) {\n                    invariant.warn(\"Missing field \" + resultFieldKey + \" in \" + JSON.stringify(result, null, 2).substring(0, 100));\n                }\n            }\n            else {\n                var fragment = getFragmentFromSelection(selection, context.fragmentMap);\n                if (policies.fragmentMatches(fragment, typename)) {\n                    mergedFields = context.merge(mergedFields, _this.processSelectionSet({\n                        result: result,\n                        selectionSet: fragment.selectionSet,\n                        context: context,\n                        typename: typename,\n                    }));\n                }\n            }\n        });\n        return mergedFields;\n    };\n    StoreWriter.prototype.processFieldValue = function (value, field, context) {\n        var _this = this;\n        if (!field.selectionSet || value === null) {\n            return process.env.NODE_ENV === 'production' ? value : cloneDeep(value);\n        }\n        if (Array.isArray(value)) {\n            return value.map(function (item, i) { return _this.processFieldValue(item, field, context); });\n        }\n        if (value) {\n            var dataId = this.policies.identify(value, field.selectionSet, context.fragmentMap);\n            if (typeof dataId === 'string') {\n                this.writeSelectionSetToStore({\n                    dataId: dataId,\n                    result: value,\n                    selectionSet: field.selectionSet,\n                    context: context,\n                });\n                return makeReference(dataId);\n            }\n        }\n        return this.processSelectionSet({\n            result: value,\n            selectionSet: field.selectionSet,\n            context: context,\n            typename: getTypenameFromResult(value, field.selectionSet, context.fragmentMap),\n        });\n    };\n    return StoreWriter;\n}());\nexport { StoreWriter };\n//# sourceMappingURL=writeToStore.js.map"],"names":[],"mappings":"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"}