{"ast":null,"code":"import { getFragmentQueryDocument } from '../../utilities/graphql/fragments.js';\nimport { justTypenameQuery, fragmentFromPojo, queryFromPojo } from './utils.js';\n\nvar ApolloCache = function () {\n  function ApolloCache() {}\n\n  ApolloCache.prototype.transformDocument = function (document) {\n    return document;\n  };\n\n  ApolloCache.prototype.transformForLink = function (document) {\n    return document;\n  };\n\n  ApolloCache.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.read({\n      query: options.query,\n      variables: options.variables,\n      optimistic: optimistic\n    });\n  };\n\n  ApolloCache.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.read({\n      query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n      variables: options.variables,\n      rootId: options.id,\n      optimistic: optimistic\n    });\n  };\n\n  ApolloCache.prototype.writeQuery = function (options) {\n    this.write({\n      dataId: 'ROOT_QUERY',\n      result: options.data,\n      query: options.query,\n      variables: options.variables\n    });\n  };\n\n  ApolloCache.prototype.writeFragment = function (options) {\n    this.write({\n      dataId: options.id,\n      result: options.data,\n      variables: options.variables,\n      query: getFragmentQueryDocument(options.fragment, options.fragmentName)\n    });\n  };\n\n  ApolloCache.prototype.writeData = function (_a) {\n    var id = _a.id,\n        data = _a.data;\n\n    if (typeof id !== 'undefined') {\n      var typenameResult = null;\n\n      try {\n        typenameResult = this.read({\n          rootId: id,\n          optimistic: false,\n          query: justTypenameQuery\n        });\n      } catch (e) {}\n\n      var __typename = typenameResult && typenameResult.__typename || '__ClientData';\n\n      var dataToWrite = Object.assign({\n        __typename: __typename\n      }, data);\n      this.writeFragment({\n        id: id,\n        fragment: fragmentFromPojo(dataToWrite, __typename),\n        data: dataToWrite\n      });\n    } else {\n      this.writeQuery({\n        query: queryFromPojo(data),\n        data: data\n      });\n    }\n  };\n\n  return ApolloCache;\n}();\n\nexport { ApolloCache };","map":{"version":3,"sources":["cache.js"],"names":[],"mappings":"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","sourcesContent":["import { getFragmentQueryDocument } from '../../utilities/graphql/fragments';\nimport { justTypenameQuery, queryFromPojo, fragmentFromPojo } from './utils';\nvar ApolloCache = (function () {\n    function ApolloCache() {\n    }\n    ApolloCache.prototype.transformDocument = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.transformForLink = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.read({\n            query: options.query,\n            variables: options.variables,\n            optimistic: optimistic,\n        });\n    };\n    ApolloCache.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.read({\n            query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n            variables: options.variables,\n            rootId: options.id,\n            optimistic: optimistic,\n        });\n    };\n    ApolloCache.prototype.writeQuery = function (options) {\n        this.write({\n            dataId: 'ROOT_QUERY',\n            result: options.data,\n            query: options.query,\n            variables: options.variables,\n        });\n    };\n    ApolloCache.prototype.writeFragment = function (options) {\n        this.write({\n            dataId: options.id,\n            result: options.data,\n            variables: options.variables,\n            query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n        });\n    };\n    ApolloCache.prototype.writeData = function (_a) {\n        var id = _a.id, data = _a.data;\n        if (typeof id !== 'undefined') {\n            var typenameResult = null;\n            try {\n                typenameResult = this.read({\n                    rootId: id,\n                    optimistic: false,\n                    query: justTypenameQuery,\n                });\n            }\n            catch (e) {\n            }\n            var __typename = (typenameResult && typenameResult.__typename) || '__ClientData';\n            var dataToWrite = Object.assign({ __typename: __typename }, data);\n            this.writeFragment({\n                id: id,\n                fragment: fragmentFromPojo(dataToWrite, __typename),\n                data: dataToWrite,\n            });\n        }\n        else {\n            this.writeQuery({ query: queryFromPojo(data), data: data });\n        }\n    };\n    return ApolloCache;\n}());\nexport { ApolloCache };\n//# sourceMappingURL=cache.js.map"]},"metadata":{},"sourceType":"module"}