{"ast":null,"code":"import { __assign } from 'tslib';\nimport { invariant } from 'ts-invariant';\nimport { createFragmentMap, getFragmentFromSelection } from '../../utilities/graphql/fragments.js';\nimport { getTypenameFromResult, isField, resultKeyNameFromField, makeReference } from '../../utilities/graphql/storeUtils.js';\nimport { getOperationDefinition, getDefaultValues, getFragmentDefinitions } from '../../utilities/graphql/getFromAST.js';\nimport { shouldInclude } from '../../utilities/graphql/directives.js';\nimport { cloneDeep } from '../../utilities/common/cloneDeep.js';\nimport { makeProcessedFieldsMerger } from './helpers.js';\nimport { defaultNormalizedCacheFactory } from './entityStore.js';\n\nvar StoreWriter = function () {\n  function StoreWriter(config) {\n    this.policies = config.policies;\n  }\n\n  StoreWriter.prototype.writeQueryToStore = function (_a) {\n    var query = _a.query,\n        result = _a.result,\n        _b = _a.dataId,\n        dataId = _b === void 0 ? 'ROOT_QUERY' : _b,\n        _c = _a.store,\n        store = _c === void 0 ? defaultNormalizedCacheFactory() : _c,\n        variables = _a.variables;\n    var operationDefinition = getOperationDefinition(query);\n    store.retain(dataId);\n    var merger = makeProcessedFieldsMerger();\n    return this.writeSelectionSetToStore({\n      result: result || Object.create(null),\n      dataId: dataId,\n      selectionSet: operationDefinition.selectionSet,\n      context: {\n        store: store,\n        written: Object.create(null),\n        merge: function (existing, incoming) {\n          return merger.merge(existing, incoming);\n        },\n        variables: __assign(__assign({}, getDefaultValues(operationDefinition)), variables),\n        fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n        getFieldValue: this.policies.makeFieldValueGetter(store)\n      }\n    });\n  };\n\n  StoreWriter.prototype.writeSelectionSetToStore = function (_a) {\n    var dataId = _a.dataId,\n        result = _a.result,\n        selectionSet = _a.selectionSet,\n        context = _a.context;\n    var policies = this.policies;\n    var store = context.store,\n        written = context.written;\n    var sets = written[dataId] || (written[dataId] = []);\n    if (sets.indexOf(selectionSet) >= 0) return store;\n    sets.push(selectionSet);\n    var entityRef = makeReference(dataId);\n    var typename = getTypenameFromResult(result, selectionSet, context.fragmentMap) || context.getFieldValue(entityRef, \"__typename\");\n    store.merge(dataId, policies.applyMerges(entityRef, this.processSelectionSet({\n      result: result,\n      selectionSet: selectionSet,\n      context: context,\n      typename: typename\n    }), context.getFieldValue, context.variables));\n    return store;\n  };\n\n  StoreWriter.prototype.processSelectionSet = function (_a) {\n    var _this = this;\n\n    var result = _a.result,\n        selectionSet = _a.selectionSet,\n        context = _a.context,\n        typename = _a.typename;\n    var mergedFields = Object.create(null);\n\n    if (typeof typename === \"string\") {\n      mergedFields.__typename = typename;\n    }\n\n    selectionSet.selections.forEach(function (selection) {\n      var _a;\n\n      if (!shouldInclude(selection, context.variables)) {\n        return;\n      }\n\n      var policies = _this.policies;\n\n      if (isField(selection)) {\n        var resultFieldKey = resultKeyNameFromField(selection);\n        var value = result[resultFieldKey];\n\n        if (typeof value !== 'undefined') {\n          var storeFieldName = policies.getStoreFieldName(typename, selection, context.variables);\n\n          var incomingValue = _this.processFieldValue(value, selection, context);\n\n          mergedFields = context.merge(mergedFields, (_a = {}, _a[storeFieldName] = policies.hasMergeFunction(typename, selection.name.value) ? {\n            __field: selection,\n            __typename: typename,\n            __value: incomingValue\n          } : incomingValue, _a));\n        } else if (policies.usingPossibleTypes && !(selection.directives && selection.directives.some(function (_a) {\n          var name = _a.name;\n          return name && (name.value === 'defer' || name.value === 'client');\n        }))) {\n          process.env.NODE_ENV === \"production\" || invariant.warn(\"Missing field \" + resultFieldKey + \" in \" + JSON.stringify(result, null, 2).substring(0, 100));\n        }\n      } else {\n        var fragment = getFragmentFromSelection(selection, context.fragmentMap);\n\n        if (policies.fragmentMatches(fragment, typename)) {\n          mergedFields = context.merge(mergedFields, _this.processSelectionSet({\n            result: result,\n            selectionSet: fragment.selectionSet,\n            context: context,\n            typename: typename\n          }));\n        }\n      }\n    });\n    return mergedFields;\n  };\n\n  StoreWriter.prototype.processFieldValue = function (value, field, context) {\n    var _this = this;\n\n    if (!field.selectionSet || value === null) {\n      return process.env.NODE_ENV === 'production' ? value : cloneDeep(value);\n    }\n\n    if (Array.isArray(value)) {\n      return value.map(function (item, i) {\n        return _this.processFieldValue(item, field, context);\n      });\n    }\n\n    if (value) {\n      var dataId = this.policies.identify(value, field.selectionSet, context.fragmentMap);\n\n      if (typeof dataId === 'string') {\n        this.writeSelectionSetToStore({\n          dataId: dataId,\n          result: value,\n          selectionSet: field.selectionSet,\n          context: context\n        });\n        return makeReference(dataId);\n      }\n    }\n\n    return this.processSelectionSet({\n      result: value,\n      selectionSet: field.selectionSet,\n      context: context,\n      typename: getTypenameFromResult(value, field.selectionSet, context.fragmentMap)\n    });\n  };\n\n  return StoreWriter;\n}();\n\nexport { StoreWriter };","map":{"version":3,"sources":["writeToStore.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { invariant } from 'ts-invariant';\nimport { createFragmentMap, getFragmentFromSelection, } from '../../utilities/graphql/fragments';\nimport { getDefaultValues, getFragmentDefinitions, getOperationDefinition, } from '../../utilities/graphql/getFromAST';\nimport { getTypenameFromResult, makeReference, isField, resultKeyNameFromField, } from '../../utilities/graphql/storeUtils';\nimport { shouldInclude } from '../../utilities/graphql/directives';\nimport { cloneDeep } from '../../utilities/common/cloneDeep';\nimport { defaultNormalizedCacheFactory } from './entityStore';\nimport { makeProcessedFieldsMerger } from './helpers';\n;\nvar StoreWriter = (function () {\n    function StoreWriter(config) {\n        this.policies = config.policies;\n    }\n    StoreWriter.prototype.writeQueryToStore = function (_a) {\n        var query = _a.query, result = _a.result, _b = _a.dataId, dataId = _b === void 0 ? 'ROOT_QUERY' : _b, _c = _a.store, store = _c === void 0 ? defaultNormalizedCacheFactory() : _c, variables = _a.variables;\n        var operationDefinition = getOperationDefinition(query);\n        store.retain(dataId);\n        var merger = makeProcessedFieldsMerger();\n        return this.writeSelectionSetToStore({\n            result: result || Object.create(null),\n            dataId: dataId,\n            selectionSet: operationDefinition.selectionSet,\n            context: {\n                store: store,\n                written: Object.create(null),\n                merge: function (existing, incoming) {\n                    return merger.merge(existing, incoming);\n                },\n                variables: __assign(__assign({}, getDefaultValues(operationDefinition)), variables),\n                fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n                getFieldValue: this.policies.makeFieldValueGetter(store),\n            },\n        });\n    };\n    StoreWriter.prototype.writeSelectionSetToStore = function (_a) {\n        var dataId = _a.dataId, result = _a.result, selectionSet = _a.selectionSet, context = _a.context;\n        var policies = this.policies;\n        var store = context.store, written = context.written;\n        var sets = written[dataId] || (written[dataId] = []);\n        if (sets.indexOf(selectionSet) >= 0)\n            return store;\n        sets.push(selectionSet);\n        var entityRef = makeReference(dataId);\n        var typename = getTypenameFromResult(result, selectionSet, context.fragmentMap) ||\n            context.getFieldValue(entityRef, \"__typename\");\n        store.merge(dataId, policies.applyMerges(entityRef, this.processSelectionSet({\n            result: result,\n            selectionSet: selectionSet,\n            context: context,\n            typename: typename,\n        }), context.getFieldValue, context.variables));\n        return store;\n    };\n    StoreWriter.prototype.processSelectionSet = function (_a) {\n        var _this = this;\n        var result = _a.result, selectionSet = _a.selectionSet, context = _a.context, typename = _a.typename;\n        var mergedFields = Object.create(null);\n        if (typeof typename === \"string\") {\n            mergedFields.__typename = typename;\n        }\n        selectionSet.selections.forEach(function (selection) {\n            var _a;\n            if (!shouldInclude(selection, context.variables)) {\n                return;\n            }\n            var policies = _this.policies;\n            if (isField(selection)) {\n                var resultFieldKey = resultKeyNameFromField(selection);\n                var value = result[resultFieldKey];\n                if (typeof value !== 'undefined') {\n                    var storeFieldName = policies.getStoreFieldName(typename, selection, context.variables);\n                    var incomingValue = _this.processFieldValue(value, selection, context);\n                    mergedFields = context.merge(mergedFields, (_a = {},\n                        _a[storeFieldName] = policies.hasMergeFunction(typename, selection.name.value) ? {\n                            __field: selection,\n                            __typename: typename,\n                            __value: incomingValue,\n                        } : incomingValue,\n                        _a));\n                }\n                else if (policies.usingPossibleTypes &&\n                    !(selection.directives &&\n                        selection.directives.some(function (_a) {\n                            var name = _a.name;\n                            return name && (name.value === 'defer' || name.value === 'client');\n                        }))) {\n                    invariant.warn(\"Missing field \" + resultFieldKey + \" in \" + JSON.stringify(result, null, 2).substring(0, 100));\n                }\n            }\n            else {\n                var fragment = getFragmentFromSelection(selection, context.fragmentMap);\n                if (policies.fragmentMatches(fragment, typename)) {\n                    mergedFields = context.merge(mergedFields, _this.processSelectionSet({\n                        result: result,\n                        selectionSet: fragment.selectionSet,\n                        context: context,\n                        typename: typename,\n                    }));\n                }\n            }\n        });\n        return mergedFields;\n    };\n    StoreWriter.prototype.processFieldValue = function (value, field, context) {\n        var _this = this;\n        if (!field.selectionSet || value === null) {\n            return process.env.NODE_ENV === 'production' ? value : cloneDeep(value);\n        }\n        if (Array.isArray(value)) {\n            return value.map(function (item, i) { return _this.processFieldValue(item, field, context); });\n        }\n        if (value) {\n            var dataId = this.policies.identify(value, field.selectionSet, context.fragmentMap);\n            if (typeof dataId === 'string') {\n                this.writeSelectionSetToStore({\n                    dataId: dataId,\n                    result: value,\n                    selectionSet: field.selectionSet,\n                    context: context,\n                });\n                return makeReference(dataId);\n            }\n        }\n        return this.processSelectionSet({\n            result: value,\n            selectionSet: field.selectionSet,\n            context: context,\n            typename: getTypenameFromResult(value, field.selectionSet, context.fragmentMap),\n        });\n    };\n    return StoreWriter;\n}());\nexport { StoreWriter };\n//# sourceMappingURL=writeToStore.js.map"]},"metadata":{},"sourceType":"module"}