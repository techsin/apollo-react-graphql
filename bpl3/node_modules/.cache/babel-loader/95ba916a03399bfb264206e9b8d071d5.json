{"ast":null,"code":"import { __assign, __extends } from 'tslib';\nimport { invariant } from 'ts-invariant';\nimport { isReference } from '../../utilities/graphql/storeUtils.js';\nimport { canUseWeakMap } from '../../utilities/common/canUse.js';\nimport { equal } from '@wry/equality';\nimport { DeepMerger } from '../../utilities/common/mergeDeep.js';\nimport { KeyTrie, dep } from 'optimism';\nimport { fieldNameFromStoreName, getTypenameFromStoreObject } from './helpers.js';\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nvar EntityStore = function () {\n  function EntityStore() {\n    this.data = Object.create(null);\n    this.rootIds = Object.create(null);\n    this.refs = Object.create(null);\n  }\n\n  EntityStore.prototype.toObject = function () {\n    return __assign({}, this.data);\n  };\n\n  EntityStore.prototype.has = function (dataId) {\n    return this.get(dataId) !== void 0;\n  };\n\n  EntityStore.prototype.get = function (dataId) {\n    this.group.depend(dataId);\n    return this.data[dataId];\n  };\n\n  EntityStore.prototype.getFieldValue = function (dataId, storeFieldName) {\n    this.group.depend(dataId, storeFieldName);\n    var storeObject = this.data[dataId];\n    return storeObject && storeObject[storeFieldName];\n  };\n\n  EntityStore.prototype.merge = function (dataId, incoming) {\n    var _this = this;\n\n    var existing = this.get(dataId);\n    var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming, this);\n\n    if (merged !== existing) {\n      this.data[dataId] = merged;\n      delete this.refs[dataId];\n\n      if (this.group.caching) {\n        this.group.dirty(dataId);\n        Object.keys(incoming).forEach(function (storeFieldName) {\n          if (!existing || incoming[storeFieldName] !== existing[storeFieldName]) {\n            _this.group.dirty(dataId, storeFieldName);\n          }\n        });\n      }\n    }\n  };\n\n  EntityStore.prototype.delete = function (dataId, fieldName) {\n    var _this = this;\n\n    var storeObject = this.get(dataId);\n\n    if (storeObject) {\n      fieldName = fieldName && fieldNameFromStoreName(fieldName);\n      var storeNamesToDelete_1 = [];\n      Object.keys(storeObject).forEach(function (storeFieldName) {\n        if (storeObject[storeFieldName] !== void 0 && (!fieldName || fieldName === fieldNameFromStoreName(storeFieldName))) {\n          storeNamesToDelete_1.push(storeFieldName);\n        }\n      });\n\n      if (storeNamesToDelete_1.length) {\n        var canDelete_1 = this instanceof EntityStore.Root;\n\n        var remove_1 = function (obj, key) {\n          if (canDelete_1) {\n            delete obj[key];\n          } else {\n            obj[key] = void 0;\n          }\n        };\n\n        delete this.refs[dataId];\n        var fieldsToDirty_1 = Object.create(null);\n\n        if (fieldName) {\n          var cleaned_1 = this.data[dataId] = __assign({}, storeObject);\n\n          storeNamesToDelete_1.forEach(function (storeFieldName) {\n            remove_1(cleaned_1, storeFieldName);\n          });\n          fieldsToDirty_1[fieldName] = true;\n        } else {\n          remove_1(this.data, dataId);\n          storeNamesToDelete_1.forEach(function (storeFieldName) {\n            var fieldName = fieldNameFromStoreName(storeFieldName);\n            fieldsToDirty_1[fieldName] = true;\n          });\n        }\n\n        if (this.group.caching) {\n          this.group.dirty(dataId);\n          Object.keys(fieldsToDirty_1).forEach(function (fieldName) {\n            _this.group.dirty(dataId, fieldName);\n          });\n        }\n      }\n    }\n  };\n\n  EntityStore.prototype.clear = function () {\n    this.replace(null);\n  };\n\n  EntityStore.prototype.replace = function (newData) {\n    var _this = this;\n\n    Object.keys(this.data).forEach(function (dataId) {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        _this.delete(dataId);\n      }\n    });\n\n    if (newData) {\n      Object.keys(newData).forEach(function (dataId) {\n        _this.merge(dataId, newData[dataId]);\n      });\n    }\n  };\n\n  EntityStore.prototype.retain = function (rootId) {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  };\n\n  EntityStore.prototype.release = function (rootId) {\n    if (this.rootIds[rootId] > 0) {\n      var count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n\n    return 0;\n  };\n\n  EntityStore.prototype.getRootIdSet = function () {\n    return new Set(Object.keys(this.rootIds));\n  };\n\n  EntityStore.prototype.gc = function () {\n    var _this = this;\n\n    var ids = this.getRootIdSet();\n    var snapshot = this.toObject();\n    ids.forEach(function (id) {\n      if (hasOwn.call(snapshot, id)) {\n        Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n        delete snapshot[id];\n      }\n    });\n    var idsToRemove = Object.keys(snapshot);\n\n    if (idsToRemove.length) {\n      var root_1 = this;\n\n      while (root_1 instanceof Layer) root_1 = root_1.parent;\n\n      idsToRemove.forEach(function (id) {\n        return root_1.delete(id);\n      });\n    }\n\n    return idsToRemove;\n  };\n\n  EntityStore.prototype.findChildRefIds = function (dataId) {\n    if (!hasOwn.call(this.refs, dataId)) {\n      var found_1 = this.refs[dataId] = Object.create(null);\n      var workSet_1 = new Set([this.data[dataId]]);\n\n      var canTraverse_1 = function (obj) {\n        return obj !== null && typeof obj === 'object';\n      };\n\n      workSet_1.forEach(function (obj) {\n        if (isReference(obj)) {\n          found_1[obj.__ref] = true;\n        } else if (canTraverse_1(obj)) {\n          Object.values(obj).filter(canTraverse_1).forEach(workSet_1.add, workSet_1);\n        }\n      });\n    }\n\n    return this.refs[dataId];\n  };\n\n  EntityStore.prototype.makeCacheKey = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return this.group.keyMaker.lookupArray(args);\n  };\n\n  return EntityStore;\n}();\n\nvar CacheGroup = function () {\n  function CacheGroup(caching) {\n    this.caching = caching;\n    this.d = null;\n    this.keyMaker = new KeyTrie(canUseWeakMap);\n    this.d = caching ? dep() : null;\n  }\n\n  CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n    }\n  };\n\n  CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d.dirty(typeof storeFieldName === \"string\" ? makeDepKey(dataId, storeFieldName) : makeDepKey(dataId));\n    }\n  };\n\n  return CacheGroup;\n}();\n\nfunction makeDepKey(dataId, storeFieldName) {\n  var parts = [dataId];\n\n  if (typeof storeFieldName === \"string\") {\n    parts.push(fieldNameFromStoreName(storeFieldName));\n  }\n\n  return JSON.stringify(parts);\n}\n\n(function (EntityStore) {\n  var Root = function (_super) {\n    __extends(Root, _super);\n\n    function Root(_a) {\n      var _b = _a.resultCaching,\n          resultCaching = _b === void 0 ? true : _b,\n          seed = _a.seed;\n\n      var _this = _super.call(this) || this;\n\n      _this.sharedLayerGroup = null;\n      _this.group = new CacheGroup(resultCaching);\n      _this.sharedLayerGroup = new CacheGroup(resultCaching);\n      if (seed) _this.replace(seed);\n      return _this;\n    }\n\n    Root.prototype.addLayer = function (layerId, replay) {\n      return new Layer(layerId, this, replay, this.sharedLayerGroup);\n    };\n\n    Root.prototype.removeLayer = function (layerId) {\n      return this;\n    };\n\n    return Root;\n  }(EntityStore);\n\n  EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\n\nvar Layer = function (_super) {\n  __extends(Layer, _super);\n\n  function Layer(id, parent, replay, group) {\n    var _this = _super.call(this) || this;\n\n    _this.id = id;\n    _this.parent = parent;\n    _this.replay = replay;\n    _this.group = group;\n    replay(_this);\n    return _this;\n  }\n\n  Layer.prototype.addLayer = function (layerId, replay) {\n    return new Layer(layerId, this, replay, this.group);\n  };\n\n  Layer.prototype.removeLayer = function (layerId) {\n    var _this = this;\n\n    var parent = this.parent.removeLayer(layerId);\n\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        Object.keys(this.data).forEach(function (dataId) {\n          return _this.delete(dataId);\n        });\n      }\n\n      return parent;\n    }\n\n    if (parent === this.parent) return this;\n    return parent.addLayer(this.id, this.replay);\n  };\n\n  Layer.prototype.toObject = function () {\n    return __assign(__assign({}, this.parent.toObject()), this.data);\n  };\n\n  Layer.prototype.get = function (dataId) {\n    if (hasOwn.call(this.data, dataId)) {\n      return _super.prototype.get.call(this, dataId);\n    }\n\n    if (this.group.caching && this.group !== this.parent.group) {\n      this.group.depend(dataId);\n    }\n\n    return this.parent.get(dataId);\n  };\n\n  Layer.prototype.getFieldValue = function (dataId, storeFieldName) {\n    if (hasOwn.call(this.data, dataId)) {\n      var storeObject = this.data[dataId];\n\n      if (storeObject && hasOwn.call(storeObject, storeFieldName)) {\n        return _super.prototype.getFieldValue.call(this, dataId, storeFieldName);\n      }\n    }\n\n    if (this.group.caching && this.group !== this.parent.group) {\n      this.group.depend(dataId, storeFieldName);\n    }\n\n    return this.parent.getFieldValue(dataId, storeFieldName);\n  };\n\n  Layer.prototype.getRootIdSet = function () {\n    var ids = this.parent.getRootIdSet();\n\n    _super.prototype.getRootIdSet.call(this).forEach(ids.add, ids);\n\n    return ids;\n  };\n\n  Layer.prototype.findChildRefIds = function (dataId) {\n    var fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n  };\n\n  return Layer;\n}(EntityStore);\n\nvar storeObjectReconciler = function (existingObject, incomingObject, property, store) {\n  var existing = existingObject[property];\n  var incoming = incomingObject[property];\n\n  if (existing !== incoming && this.isObject(existing) && this.isObject(incoming)) {\n    var eType = getTypenameFromStoreObject(store, existing);\n    var iType = getTypenameFromStoreObject(store, incoming);\n\n    if (typeof eType === 'string' && typeof iType === 'string' && eType !== iType) {\n      return incoming;\n    }\n\n    process.env.NODE_ENV === \"production\" ? invariant(!isReference(existing) || isReference(incoming), 54) : invariant(!isReference(existing) || isReference(incoming), \"Store error: the application attempted to write an object with no provided id but the store already contains an id of \" + existing.__ref + \" for this object.\");\n\n    if (equal(existing, incoming)) {\n      return existing;\n    }\n  }\n\n  return incoming;\n};\n\nfunction supportsResultCaching(store) {\n  return !!(store instanceof EntityStore && store.group.caching);\n}\n\nfunction defaultNormalizedCacheFactory(seed) {\n  return new EntityStore.Root({\n    resultCaching: true,\n    seed: seed\n  });\n}\n\nexport { EntityStore, defaultNormalizedCacheFactory, supportsResultCaching };","map":{"version":3,"sources":["entityStore.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { dep, KeyTrie } from 'optimism';\nimport { invariant } from 'ts-invariant';\nimport { equal } from '@wry/equality';\nimport { isReference } from '../../utilities/graphql/storeUtils';\nimport { DeepMerger, } from '../../utilities/common/mergeDeep';\nimport { canUseWeakMap } from '../../utilities/common/canUse';\nimport { getTypenameFromStoreObject, fieldNameFromStoreName, } from './helpers';\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar EntityStore = (function () {\n    function EntityStore() {\n        this.data = Object.create(null);\n        this.rootIds = Object.create(null);\n        this.refs = Object.create(null);\n    }\n    EntityStore.prototype.toObject = function () {\n        return __assign({}, this.data);\n    };\n    EntityStore.prototype.has = function (dataId) {\n        return this.get(dataId) !== void 0;\n    };\n    EntityStore.prototype.get = function (dataId) {\n        this.group.depend(dataId);\n        return this.data[dataId];\n    };\n    EntityStore.prototype.getFieldValue = function (dataId, storeFieldName) {\n        this.group.depend(dataId, storeFieldName);\n        var storeObject = this.data[dataId];\n        return storeObject && storeObject[storeFieldName];\n    };\n    EntityStore.prototype.merge = function (dataId, incoming) {\n        var _this = this;\n        var existing = this.get(dataId);\n        var merged = new DeepMerger(storeObjectReconciler)\n            .merge(existing, incoming, this);\n        if (merged !== existing) {\n            this.data[dataId] = merged;\n            delete this.refs[dataId];\n            if (this.group.caching) {\n                this.group.dirty(dataId);\n                Object.keys(incoming).forEach(function (storeFieldName) {\n                    if (!existing || incoming[storeFieldName] !== existing[storeFieldName]) {\n                        _this.group.dirty(dataId, storeFieldName);\n                    }\n                });\n            }\n        }\n    };\n    EntityStore.prototype.delete = function (dataId, fieldName) {\n        var _this = this;\n        var storeObject = this.get(dataId);\n        if (storeObject) {\n            fieldName = fieldName && fieldNameFromStoreName(fieldName);\n            var storeNamesToDelete_1 = [];\n            Object.keys(storeObject).forEach(function (storeFieldName) {\n                if (storeObject[storeFieldName] !== void 0 &&\n                    (!fieldName || fieldName === fieldNameFromStoreName(storeFieldName))) {\n                    storeNamesToDelete_1.push(storeFieldName);\n                }\n            });\n            if (storeNamesToDelete_1.length) {\n                var canDelete_1 = this instanceof EntityStore.Root;\n                var remove_1 = function (obj, key) {\n                    if (canDelete_1) {\n                        delete obj[key];\n                    }\n                    else {\n                        obj[key] = void 0;\n                    }\n                };\n                delete this.refs[dataId];\n                var fieldsToDirty_1 = Object.create(null);\n                if (fieldName) {\n                    var cleaned_1 = this.data[dataId] = __assign({}, storeObject);\n                    storeNamesToDelete_1.forEach(function (storeFieldName) {\n                        remove_1(cleaned_1, storeFieldName);\n                    });\n                    fieldsToDirty_1[fieldName] = true;\n                }\n                else {\n                    remove_1(this.data, dataId);\n                    storeNamesToDelete_1.forEach(function (storeFieldName) {\n                        var fieldName = fieldNameFromStoreName(storeFieldName);\n                        fieldsToDirty_1[fieldName] = true;\n                    });\n                }\n                if (this.group.caching) {\n                    this.group.dirty(dataId);\n                    Object.keys(fieldsToDirty_1).forEach(function (fieldName) {\n                        _this.group.dirty(dataId, fieldName);\n                    });\n                }\n            }\n        }\n    };\n    EntityStore.prototype.clear = function () {\n        this.replace(null);\n    };\n    EntityStore.prototype.replace = function (newData) {\n        var _this = this;\n        Object.keys(this.data).forEach(function (dataId) {\n            if (!(newData && hasOwn.call(newData, dataId))) {\n                _this.delete(dataId);\n            }\n        });\n        if (newData) {\n            Object.keys(newData).forEach(function (dataId) {\n                _this.merge(dataId, newData[dataId]);\n            });\n        }\n    };\n    EntityStore.prototype.retain = function (rootId) {\n        return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n    };\n    EntityStore.prototype.release = function (rootId) {\n        if (this.rootIds[rootId] > 0) {\n            var count = --this.rootIds[rootId];\n            if (!count)\n                delete this.rootIds[rootId];\n            return count;\n        }\n        return 0;\n    };\n    EntityStore.prototype.getRootIdSet = function () {\n        return new Set(Object.keys(this.rootIds));\n    };\n    EntityStore.prototype.gc = function () {\n        var _this = this;\n        var ids = this.getRootIdSet();\n        var snapshot = this.toObject();\n        ids.forEach(function (id) {\n            if (hasOwn.call(snapshot, id)) {\n                Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n                delete snapshot[id];\n            }\n        });\n        var idsToRemove = Object.keys(snapshot);\n        if (idsToRemove.length) {\n            var root_1 = this;\n            while (root_1 instanceof Layer)\n                root_1 = root_1.parent;\n            idsToRemove.forEach(function (id) { return root_1.delete(id); });\n        }\n        return idsToRemove;\n    };\n    EntityStore.prototype.findChildRefIds = function (dataId) {\n        if (!hasOwn.call(this.refs, dataId)) {\n            var found_1 = this.refs[dataId] = Object.create(null);\n            var workSet_1 = new Set([this.data[dataId]]);\n            var canTraverse_1 = function (obj) { return obj !== null && typeof obj === 'object'; };\n            workSet_1.forEach(function (obj) {\n                if (isReference(obj)) {\n                    found_1[obj.__ref] = true;\n                }\n                else if (canTraverse_1(obj)) {\n                    Object.values(obj)\n                        .filter(canTraverse_1)\n                        .forEach(workSet_1.add, workSet_1);\n                }\n            });\n        }\n        return this.refs[dataId];\n    };\n    EntityStore.prototype.makeCacheKey = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return this.group.keyMaker.lookupArray(args);\n    };\n    return EntityStore;\n}());\nexport { EntityStore };\nvar CacheGroup = (function () {\n    function CacheGroup(caching) {\n        this.caching = caching;\n        this.d = null;\n        this.keyMaker = new KeyTrie(canUseWeakMap);\n        this.d = caching ? dep() : null;\n    }\n    CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n        if (this.d) {\n            this.d(makeDepKey(dataId, storeFieldName));\n        }\n    };\n    CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n        if (this.d) {\n            this.d.dirty(typeof storeFieldName === \"string\"\n                ? makeDepKey(dataId, storeFieldName)\n                : makeDepKey(dataId));\n        }\n    };\n    return CacheGroup;\n}());\nfunction makeDepKey(dataId, storeFieldName) {\n    var parts = [dataId];\n    if (typeof storeFieldName === \"string\") {\n        parts.push(fieldNameFromStoreName(storeFieldName));\n    }\n    return JSON.stringify(parts);\n}\n(function (EntityStore) {\n    var Root = (function (_super) {\n        __extends(Root, _super);\n        function Root(_a) {\n            var _b = _a.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a.seed;\n            var _this = _super.call(this) || this;\n            _this.sharedLayerGroup = null;\n            _this.group = new CacheGroup(resultCaching);\n            _this.sharedLayerGroup = new CacheGroup(resultCaching);\n            if (seed)\n                _this.replace(seed);\n            return _this;\n        }\n        Root.prototype.addLayer = function (layerId, replay) {\n            return new Layer(layerId, this, replay, this.sharedLayerGroup);\n        };\n        Root.prototype.removeLayer = function (layerId) {\n            return this;\n        };\n        return Root;\n    }(EntityStore));\n    EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\nvar Layer = (function (_super) {\n    __extends(Layer, _super);\n    function Layer(id, parent, replay, group) {\n        var _this = _super.call(this) || this;\n        _this.id = id;\n        _this.parent = parent;\n        _this.replay = replay;\n        _this.group = group;\n        replay(_this);\n        return _this;\n    }\n    Layer.prototype.addLayer = function (layerId, replay) {\n        return new Layer(layerId, this, replay, this.group);\n    };\n    Layer.prototype.removeLayer = function (layerId) {\n        var _this = this;\n        var parent = this.parent.removeLayer(layerId);\n        if (layerId === this.id) {\n            if (this.group.caching) {\n                Object.keys(this.data).forEach(function (dataId) { return _this.delete(dataId); });\n            }\n            return parent;\n        }\n        if (parent === this.parent)\n            return this;\n        return parent.addLayer(this.id, this.replay);\n    };\n    Layer.prototype.toObject = function () {\n        return __assign(__assign({}, this.parent.toObject()), this.data);\n    };\n    Layer.prototype.get = function (dataId) {\n        if (hasOwn.call(this.data, dataId)) {\n            return _super.prototype.get.call(this, dataId);\n        }\n        if (this.group.caching && this.group !== this.parent.group) {\n            this.group.depend(dataId);\n        }\n        return this.parent.get(dataId);\n    };\n    Layer.prototype.getFieldValue = function (dataId, storeFieldName) {\n        if (hasOwn.call(this.data, dataId)) {\n            var storeObject = this.data[dataId];\n            if (storeObject && hasOwn.call(storeObject, storeFieldName)) {\n                return _super.prototype.getFieldValue.call(this, dataId, storeFieldName);\n            }\n        }\n        if (this.group.caching && this.group !== this.parent.group) {\n            this.group.depend(dataId, storeFieldName);\n        }\n        return this.parent.getFieldValue(dataId, storeFieldName);\n    };\n    Layer.prototype.getRootIdSet = function () {\n        var ids = this.parent.getRootIdSet();\n        _super.prototype.getRootIdSet.call(this).forEach(ids.add, ids);\n        return ids;\n    };\n    Layer.prototype.findChildRefIds = function (dataId) {\n        var fromParent = this.parent.findChildRefIds(dataId);\n        return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n    };\n    return Layer;\n}(EntityStore));\nvar storeObjectReconciler = function (existingObject, incomingObject, property, store) {\n    var existing = existingObject[property];\n    var incoming = incomingObject[property];\n    if (existing !== incoming &&\n        this.isObject(existing) &&\n        this.isObject(incoming)) {\n        var eType = getTypenameFromStoreObject(store, existing);\n        var iType = getTypenameFromStoreObject(store, incoming);\n        if (typeof eType === 'string' &&\n            typeof iType === 'string' &&\n            eType !== iType) {\n            return incoming;\n        }\n        invariant(!isReference(existing) || isReference(incoming), \"Store error: the application attempted to write an object with no provided id but the store already contains an id of \" + existing.__ref + \" for this object.\");\n        if (equal(existing, incoming)) {\n            return existing;\n        }\n    }\n    return incoming;\n};\nexport function supportsResultCaching(store) {\n    return !!(store instanceof EntityStore && store.group.caching);\n}\nexport function defaultNormalizedCacheFactory(seed) {\n    return new EntityStore.Root({ resultCaching: true, seed: seed });\n}\n//# sourceMappingURL=entityStore.js.map"]},"metadata":{},"sourceType":"module"}