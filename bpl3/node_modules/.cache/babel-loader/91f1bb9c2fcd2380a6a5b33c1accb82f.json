{"ast":null,"code":"import { __assign } from 'tslib';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { createFragmentMap } from '../../utilities/graphql/fragments.js';\nimport { isReference, makeReference, isField, resultKeyNameFromField, isInlineFragment } from '../../utilities/graphql/storeUtils.js';\nimport { getMainDefinition, getDefaultValues, getQueryDefinition, getFragmentDefinitions } from '../../utilities/graphql/getFromAST.js';\nimport { shouldInclude } from '../../utilities/graphql/directives.js';\nimport { mergeDeepArray } from '../../utilities/common/mergeDeep.js';\nimport { wrap } from 'optimism';\nimport { maybeDeepFreeze } from '../../utilities/common/maybeDeepFreeze.js';\nimport { getTypenameFromStoreObject } from './helpers.js';\nimport { supportsResultCaching } from './entityStore.js';\n\nvar StoreReader = function () {\n  function StoreReader(config) {\n    var _this = this;\n\n    this.config = config;\n    this.config = __assign({\n      addTypename: true\n    }, config);\n\n    var _a = this,\n        executeSelectionSet = _a.executeSelectionSet,\n        executeSubSelectedArray = _a.executeSubSelectedArray;\n\n    this.executeSelectionSet = wrap(function (options) {\n      return executeSelectionSet.call(_this, options);\n    }, {\n      makeCacheKey: function (_a) {\n        var selectionSet = _a.selectionSet,\n            objectOrReference = _a.objectOrReference,\n            context = _a.context;\n\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(selectionSet, JSON.stringify(context.variables), isReference(objectOrReference) ? objectOrReference.__ref : objectOrReference);\n        }\n      }\n    });\n    this.executeSubSelectedArray = wrap(function (options) {\n      return executeSubSelectedArray.call(_this, options);\n    }, {\n      makeCacheKey: function (_a) {\n        var field = _a.field,\n            array = _a.array,\n            context = _a.context;\n\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(field, array, JSON.stringify(context.variables));\n        }\n      }\n    });\n  }\n\n  StoreReader.prototype.readQueryFromStore = function (options) {\n    return this.diffQueryAgainstStore(__assign(__assign({}, options), {\n      returnPartialData: false\n    })).result;\n  };\n\n  StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n    var store = _a.store,\n        query = _a.query,\n        variables = _a.variables,\n        _b = _a.returnPartialData,\n        returnPartialData = _b === void 0 ? true : _b,\n        _c = _a.rootId,\n        rootId = _c === void 0 ? 'ROOT_QUERY' : _c,\n        config = _a.config;\n    var policies = this.config.policies;\n    var execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: makeReference(rootId),\n      context: {\n        store: store,\n        query: query,\n        policies: policies,\n        variables: __assign(__assign({}, getDefaultValues(getQueryDefinition(query))), variables),\n        fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n        getFieldValue: policies.makeFieldValueGetter(store)\n      }\n    });\n    var hasMissingFields = execResult.missing && execResult.missing.length > 0;\n\n    if (hasMissingFields && !returnPartialData) {\n      execResult.missing.forEach(function (info) {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(51) : new InvariantError(\"Can't find field \" + info.fieldName + \" on object \" + JSON.stringify(info.object, null, 2) + \".\");\n      });\n    }\n\n    return {\n      result: execResult.result,\n      complete: !hasMissingFields\n    };\n  };\n\n  StoreReader.prototype.executeSelectionSet = function (_a) {\n    var _this = this;\n\n    var selectionSet = _a.selectionSet,\n        objectOrReference = _a.objectOrReference,\n        context = _a.context;\n    var fragmentMap = context.fragmentMap,\n        variables = context.variables,\n        policies = context.policies,\n        getFieldValue = context.getFieldValue;\n    var objectsToMerge = [];\n    var finalResult = {\n      result: null\n    };\n    var typename = getFieldValue(objectOrReference, \"__typename\");\n\n    if (this.config.addTypename && typeof typename === \"string\" && Object.values(policies.rootTypenamesById).indexOf(typename) < 0) {\n      objectsToMerge.push({\n        __typename: typename\n      });\n    }\n\n    function getMissing() {\n      return finalResult.missing || (finalResult.missing = []);\n    }\n\n    function handleMissing(result) {\n      var _a;\n\n      if (result.missing) (_a = getMissing()).push.apply(_a, result.missing);\n      return result.result;\n    }\n\n    selectionSet.selections.forEach(function (selection) {\n      var _a;\n\n      if (!shouldInclude(selection, variables)) return;\n\n      if (isField(selection)) {\n        var fieldValue = policies.readField(objectOrReference, selection, getFieldValue, variables, typename);\n\n        if (fieldValue === void 0) {\n          getMissing().push({\n            object: objectOrReference,\n            fieldName: selection.name.value\n          });\n        } else if (Array.isArray(fieldValue)) {\n          fieldValue = handleMissing(_this.executeSubSelectedArray({\n            field: selection,\n            array: fieldValue,\n            context: context\n          }));\n        } else if (!selection.selectionSet) {\n          if (process.env.NODE_ENV !== 'production') {\n            assertSelectionSetForIdValue(context.store, selection, fieldValue);\n            maybeDeepFreeze(fieldValue);\n          }\n        } else if (fieldValue != null) {\n          fieldValue = handleMissing(_this.executeSelectionSet({\n            selectionSet: selection.selectionSet,\n            objectOrReference: fieldValue,\n            context: context\n          }));\n        }\n\n        if (fieldValue !== void 0) {\n          objectsToMerge.push((_a = {}, _a[resultKeyNameFromField(selection)] = fieldValue, _a));\n        }\n      } else {\n        var fragment = void 0;\n\n        if (isInlineFragment(selection)) {\n          fragment = selection;\n        } else {\n          process.env.NODE_ENV === \"production\" ? invariant(fragment = fragmentMap[selection.name.value], 52) : invariant(fragment = fragmentMap[selection.name.value], \"No fragment named \" + selection.name.value);\n        }\n\n        if (policies.fragmentMatches(fragment, typename)) {\n          objectsToMerge.push(handleMissing(_this.executeSelectionSet({\n            selectionSet: fragment.selectionSet,\n            objectOrReference: objectOrReference,\n            context: context\n          })));\n        }\n      }\n    });\n    finalResult.result = mergeDeepArray(objectsToMerge);\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(finalResult.result);\n    }\n\n    return finalResult;\n  };\n\n  StoreReader.prototype.executeSubSelectedArray = function (_a) {\n    var _this = this;\n\n    var field = _a.field,\n        array = _a.array,\n        context = _a.context;\n    var missing;\n\n    function handleMissing(childResult) {\n      if (childResult.missing) {\n        missing = missing || [];\n        missing.push.apply(missing, childResult.missing);\n      }\n\n      return childResult.result;\n    }\n\n    array = array.map(function (item) {\n      if (item === null) {\n        return null;\n      }\n\n      if (Array.isArray(item)) {\n        return handleMissing(_this.executeSubSelectedArray({\n          field: field,\n          array: item,\n          context: context\n        }));\n      }\n\n      if (field.selectionSet) {\n        return handleMissing(_this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          objectOrReference: item,\n          context: context\n        }));\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n\n      return item;\n    });\n\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(array);\n    }\n\n    return {\n      result: array,\n      missing: missing\n    };\n  };\n\n  return StoreReader;\n}();\n\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n  if (!field.selectionSet) {\n    var workSet_1 = new Set([fieldValue]);\n    workSet_1.forEach(function (value) {\n      if (value && typeof value === \"object\") {\n        process.env.NODE_ENV === \"production\" ? invariant(!isReference(value), 53) : invariant(!isReference(value), \"Missing selection set for object of type \" + getTypenameFromStoreObject(store, value) + \" returned for query field \" + field.name.value);\n        Object.values(value).forEach(workSet_1.add, workSet_1);\n      }\n    });\n  }\n}\n\nexport { StoreReader };","map":{"version":3,"sources":["readFromStore.js"],"names":[],"mappings":";;;;;;;;;;;;AAYG,IAAC,WAAW,GAAI,YAAY;AAC3B,WAAS,WAAT,CAAqB,MAArB,EAA6B;AACzB,QAAI,KAAK,GAAG,IAAZ;;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,MAAL,GAAc,QAAQ,CAAC;AAAE,MAAA,WAAW,EAAE;AAAf,KAAD,EAAwB,MAAxB,CAAtB;;AACA,QAAI,EAAE,GAAG,IAAT;AAAA,QAAe,mBAAmB,GAAG,EAAE,CAAC,mBAAxC;AAAA,QAA6D,uBAAuB,GAAG,EAAE,CAAC,uBAA1F;;AACA,SAAK,mBAAL,GAA2B,IAAI,CAAC,UAAU,OAAV,EAAmB;AAC/C,aAAO,mBAAmB,CAAC,IAApB,CAAyB,KAAzB,EAAgC,OAAhC,CAAP;AACH,KAF8B,EAE5B;AACC,MAAA,YAAY,EAAE,UAAU,EAAV,EAAc;AACxB,YAAI,YAAY,GAAG,EAAE,CAAC,YAAtB;AAAA,YAAoC,iBAAiB,GAAG,EAAE,CAAC,iBAA3D;AAAA,YAA8E,OAAO,GAAG,EAAE,CAAC,OAA3F;;AACA,YAAI,qBAAqB,CAAC,OAAO,CAAC,KAAT,CAAzB,EAA0C;AACtC,iBAAO,OAAO,CAAC,KAAR,CAAc,YAAd,CAA2B,YAA3B,EAAyC,IAAI,CAAC,SAAL,CAAe,OAAO,CAAC,SAAvB,CAAzC,EAA4E,WAAW,CAAC,iBAAD,CAAX,GAC7E,iBAAiB,CAAC,KAD2D,GAE7E,iBAFC,CAAP;AAGH;AACJ;AARF,KAF4B,CAA/B;AAYA,SAAK,uBAAL,GAA+B,IAAI,CAAC,UAAU,OAAV,EAAmB;AACnD,aAAO,uBAAuB,CAAC,IAAxB,CAA6B,KAA7B,EAAoC,OAApC,CAAP;AACH,KAFkC,EAEhC;AACC,MAAA,YAAY,EAAE,UAAU,EAAV,EAAc;AACxB,YAAI,KAAK,GAAG,EAAE,CAAC,KAAf;AAAA,YAAsB,KAAK,GAAG,EAAE,CAAC,KAAjC;AAAA,YAAwC,OAAO,GAAG,EAAE,CAAC,OAArD;;AACA,YAAI,qBAAqB,CAAC,OAAO,CAAC,KAAT,CAAzB,EAA0C;AACtC,iBAAO,OAAO,CAAC,KAAR,CAAc,YAAd,CAA2B,KAA3B,EAAkC,KAAlC,EAAyC,IAAI,CAAC,SAAL,CAAe,OAAO,CAAC,SAAvB,CAAzC,CAAP;AACH;AACJ;AANF,KAFgC,CAAnC;AAUH;;AACD,EAAA,WAAW,CAAC,SAAZ,CAAsB,kBAAtB,GAA2C,UAAU,OAAV,EAAmB;AAC1D,WAAO,KAAK,qBAAL,CAA2B,QAAQ,CAAC,QAAQ,CAAC,EAAD,EAAK,OAAL,CAAT,EAAwB;AAAE,MAAA,iBAAiB,EAAE;AAArB,KAAxB,CAAnC,EAA0F,MAAjG;AACH,GAFD;;AAGA,EAAA,WAAW,CAAC,SAAZ,CAAsB,qBAAtB,GAA8C,UAAU,EAAV,EAAc;AACxD,QAAI,KAAK,GAAG,EAAE,CAAC,KAAf;AAAA,QAAsB,KAAK,GAAG,EAAE,CAAC,KAAjC;AAAA,QAAwC,SAAS,GAAG,EAAE,CAAC,SAAvD;AAAA,QAAkE,EAAE,GAAG,EAAE,CAAC,iBAA1E;AAAA,QAA6F,iBAAiB,GAAG,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuB,EAAxI;AAAA,QAA4I,EAAE,GAAG,EAAE,CAAC,MAApJ;AAAA,QAA4J,MAAM,GAAG,EAAE,KAAK,KAAK,CAAZ,GAAgB,YAAhB,GAA+B,EAApM;AAAA,QAAwM,MAAM,GAAG,EAAE,CAAC,MAApN;AACA,QAAI,QAAQ,GAAG,KAAK,MAAL,CAAY,QAA3B;AACA,QAAI,UAAU,GAAG,KAAK,mBAAL,CAAyB;AACtC,MAAA,YAAY,EAAE,iBAAiB,CAAC,KAAD,CAAjB,CAAyB,YADD;AAEtC,MAAA,iBAAiB,EAAE,aAAa,CAAC,MAAD,CAFM;AAGtC,MAAA,OAAO,EAAE;AACL,QAAA,KAAK,EAAE,KADF;AAEL,QAAA,KAAK,EAAE,KAFF;AAGL,QAAA,QAAQ,EAAE,QAHL;AAIL,QAAA,SAAS,EAAE,QAAQ,CAAC,QAAQ,CAAC,EAAD,EAAK,gBAAgB,CAAC,kBAAkB,CAAC,KAAD,CAAnB,CAArB,CAAT,EAA4D,SAA5D,CAJd;AAKL,QAAA,WAAW,EAAE,iBAAiB,CAAC,sBAAsB,CAAC,KAAD,CAAvB,CALzB;AAML,QAAA,aAAa,EAAE,QAAQ,CAAC,oBAAT,CAA8B,KAA9B;AANV;AAH6B,KAAzB,CAAjB;AAYA,QAAI,gBAAgB,GAAG,UAAU,CAAC,OAAX,IAAsB,UAAU,CAAC,OAAX,CAAmB,MAAnB,GAA4B,CAAzE;;AACA,QAAI,gBAAgB,IAAI,CAAC,iBAAzB,EAA4C;AACxC,MAAA,UAAU,CAAC,OAAX,CAAmB,OAAnB,CAA2B,UAAU,IAAV,EAAgB;AACvC,cAAM,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,IAAI,cAAJ,CAAmB,EAAnB,CAAxC,GAAiE,IAAI,cAAJ,CAAmB,sBAAsB,IAAI,CAAC,SAA3B,GAAuC,aAAvC,GAAuD,IAAI,CAAC,SAAL,CAAe,IAAI,CAAC,MAApB,EAA4B,IAA5B,EAAkC,CAAlC,CAAvD,GAA8F,GAAjH,CAAvE;AACH,OAFD;AAGH;;AACD,WAAO;AACH,MAAA,MAAM,EAAE,UAAU,CAAC,MADhB;AAEH,MAAA,QAAQ,EAAE,CAAC;AAFR,KAAP;AAIH,GAzBD;;AA0BA,EAAA,WAAW,CAAC,SAAZ,CAAsB,mBAAtB,GAA4C,UAAU,EAAV,EAAc;AACtD,QAAI,KAAK,GAAG,IAAZ;;AACA,QAAI,YAAY,GAAG,EAAE,CAAC,YAAtB;AAAA,QAAoC,iBAAiB,GAAG,EAAE,CAAC,iBAA3D;AAAA,QAA8E,OAAO,GAAG,EAAE,CAAC,OAA3F;AACA,QAAI,WAAW,GAAG,OAAO,CAAC,WAA1B;AAAA,QAAuC,SAAS,GAAG,OAAO,CAAC,SAA3D;AAAA,QAAsE,QAAQ,GAAG,OAAO,CAAC,QAAzF;AAAA,QAAmG,aAAa,GAAG,OAAO,CAAC,aAA3H;AACA,QAAI,cAAc,GAAG,EAArB;AACA,QAAI,WAAW,GAAG;AAAE,MAAA,MAAM,EAAE;AAAV,KAAlB;AACA,QAAI,QAAQ,GAAG,aAAa,CAAC,iBAAD,EAAoB,YAApB,CAA5B;;AACA,QAAI,KAAK,MAAL,CAAY,WAAZ,IACA,OAAO,QAAP,KAAoB,QADpB,IAEA,MAAM,CAAC,MAAP,CAAc,QAAQ,CAAC,iBAAvB,EAA0C,OAA1C,CAAkD,QAAlD,IAA8D,CAFlE,EAEqE;AACjE,MAAA,cAAc,CAAC,IAAf,CAAoB;AAAE,QAAA,UAAU,EAAE;AAAd,OAApB;AACH;;AACD,aAAS,UAAT,GAAsB;AAClB,aAAO,WAAW,CAAC,OAAZ,KAAwB,WAAW,CAAC,OAAZ,GAAsB,EAA9C,CAAP;AACH;;AACD,aAAS,aAAT,CAAuB,MAAvB,EAA+B;AAC3B,UAAI,EAAJ;;AACA,UAAI,MAAM,CAAC,OAAX,EACI,CAAC,EAAE,GAAG,UAAU,EAAhB,EAAoB,IAApB,CAAyB,KAAzB,CAA+B,EAA/B,EAAmC,MAAM,CAAC,OAA1C;AACJ,aAAO,MAAM,CAAC,MAAd;AACH;;AACD,IAAA,YAAY,CAAC,UAAb,CAAwB,OAAxB,CAAgC,UAAU,SAAV,EAAqB;AACjD,UAAI,EAAJ;;AACA,UAAI,CAAC,aAAa,CAAC,SAAD,EAAY,SAAZ,CAAlB,EACI;;AACJ,UAAI,OAAO,CAAC,SAAD,CAAX,EAAwB;AACpB,YAAI,UAAU,GAAG,QAAQ,CAAC,SAAT,CAAmB,iBAAnB,EAAsC,SAAtC,EAAiD,aAAjD,EAAgE,SAAhE,EAA2E,QAA3E,CAAjB;;AACA,YAAI,UAAU,KAAK,KAAK,CAAxB,EAA2B;AACvB,UAAA,UAAU,GAAG,IAAb,CAAkB;AACd,YAAA,MAAM,EAAE,iBADM;AAEd,YAAA,SAAS,EAAE,SAAS,CAAC,IAAV,CAAe;AAFZ,WAAlB;AAIH,SALD,MAMK,IAAI,KAAK,CAAC,OAAN,CAAc,UAAd,CAAJ,EAA+B;AAChC,UAAA,UAAU,GAAG,aAAa,CAAC,KAAK,CAAC,uBAAN,CAA8B;AACrD,YAAA,KAAK,EAAE,SAD8C;AAErD,YAAA,KAAK,EAAE,UAF8C;AAGrD,YAAA,OAAO,EAAE;AAH4C,WAA9B,CAAD,CAA1B;AAKH,SANI,MAOA,IAAI,CAAC,SAAS,CAAC,YAAf,EAA6B;AAC9B,cAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACvC,YAAA,4BAA4B,CAAC,OAAO,CAAC,KAAT,EAAgB,SAAhB,EAA2B,UAA3B,CAA5B;AACA,YAAA,eAAe,CAAC,UAAD,CAAf;AACH;AACJ,SALI,MAMA,IAAI,UAAU,IAAI,IAAlB,EAAwB;AACzB,UAAA,UAAU,GAAG,aAAa,CAAC,KAAK,CAAC,mBAAN,CAA0B;AACjD,YAAA,YAAY,EAAE,SAAS,CAAC,YADyB;AAEjD,YAAA,iBAAiB,EAAE,UAF8B;AAGjD,YAAA,OAAO,EAAE;AAHwC,WAA1B,CAAD,CAA1B;AAKH;;AACD,YAAI,UAAU,KAAK,KAAK,CAAxB,EAA2B;AACvB,UAAA,cAAc,CAAC,IAAf,EAAqB,EAAE,GAAG,EAAL,EACjB,EAAE,CAAC,sBAAsB,CAAC,SAAD,CAAvB,CAAF,GAAwC,UADvB,EAEjB,EAFJ;AAGH;AACJ,OAjCD,MAkCK;AACD,YAAI,QAAQ,GAAG,KAAK,CAApB;;AACA,YAAI,gBAAgB,CAAC,SAAD,CAApB,EAAiC;AAC7B,UAAA,QAAQ,GAAG,SAAX;AACH,SAFD,MAGK;AACD,UAAA,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,SAAS,CAAC,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC,IAAV,CAAe,KAAhB,CAAvB,EAA+C,EAA/C,CAAjD,GAAsG,SAAS,CAAC,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC,IAAV,CAAe,KAAhB,CAAvB,EAA+C,uBAAuB,SAAS,CAAC,IAAV,CAAe,KAArF,CAA/G;AACH;;AACD,YAAI,QAAQ,CAAC,eAAT,CAAyB,QAAzB,EAAmC,QAAnC,CAAJ,EAAkD;AAC9C,UAAA,cAAc,CAAC,IAAf,CAAoB,aAAa,CAAC,KAAK,CAAC,mBAAN,CAA0B;AACxD,YAAA,YAAY,EAAE,QAAQ,CAAC,YADiC;AAExD,YAAA,iBAAiB,EAAE,iBAFqC;AAGxD,YAAA,OAAO,EAAE;AAH+C,WAA1B,CAAD,CAAjC;AAKH;AACJ;AACJ,KAtDD;AAuDA,IAAA,WAAW,CAAC,MAAZ,GAAqB,cAAc,CAAC,cAAD,CAAnC;;AACA,QAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACvC,MAAA,MAAM,CAAC,MAAP,CAAc,WAAW,CAAC,MAA1B;AACH;;AACD,WAAO,WAAP;AACH,GAjFD;;AAkFA,EAAA,WAAW,CAAC,SAAZ,CAAsB,uBAAtB,GAAgD,UAAU,EAAV,EAAc;AAC1D,QAAI,KAAK,GAAG,IAAZ;;AACA,QAAI,KAAK,GAAG,EAAE,CAAC,KAAf;AAAA,QAAsB,KAAK,GAAG,EAAE,CAAC,KAAjC;AAAA,QAAwC,OAAO,GAAG,EAAE,CAAC,OAArD;AACA,QAAI,OAAJ;;AACA,aAAS,aAAT,CAAuB,WAAvB,EAAoC;AAChC,UAAI,WAAW,CAAC,OAAhB,EAAyB;AACrB,QAAA,OAAO,GAAG,OAAO,IAAI,EAArB;AACA,QAAA,OAAO,CAAC,IAAR,CAAa,KAAb,CAAmB,OAAnB,EAA4B,WAAW,CAAC,OAAxC;AACH;;AACD,aAAO,WAAW,CAAC,MAAnB;AACH;;AACD,IAAA,KAAK,GAAG,KAAK,CAAC,GAAN,CAAU,UAAU,IAAV,EAAgB;AAC9B,UAAI,IAAI,KAAK,IAAb,EAAmB;AACf,eAAO,IAAP;AACH;;AACD,UAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACrB,eAAO,aAAa,CAAC,KAAK,CAAC,uBAAN,CAA8B;AAC/C,UAAA,KAAK,EAAE,KADwC;AAE/C,UAAA,KAAK,EAAE,IAFwC;AAG/C,UAAA,OAAO,EAAE;AAHsC,SAA9B,CAAD,CAApB;AAKH;;AACD,UAAI,KAAK,CAAC,YAAV,EAAwB;AACpB,eAAO,aAAa,CAAC,KAAK,CAAC,mBAAN,CAA0B;AAC3C,UAAA,YAAY,EAAE,KAAK,CAAC,YADuB;AAE3C,UAAA,iBAAiB,EAAE,IAFwB;AAG3C,UAAA,OAAO,EAAE;AAHkC,SAA1B,CAAD,CAApB;AAKH;;AACD,UAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACvC,QAAA,4BAA4B,CAAC,OAAO,CAAC,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,CAA5B;AACH;;AACD,aAAO,IAAP;AACH,KAtBO,CAAR;;AAuBA,QAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACvC,MAAA,MAAM,CAAC,MAAP,CAAc,KAAd;AACH;;AACD,WAAO;AAAE,MAAA,MAAM,EAAE,KAAV;AAAiB,MAAA,OAAO,EAAE;AAA1B,KAAP;AACH,GAtCD;;AAuCA,SAAO,WAAP;AACH,CApLkB,EAAhB;;AAsLH,SAAS,4BAAT,CAAsC,KAAtC,EAA6C,KAA7C,EAAoD,UAApD,EAAgE;AAC5D,MAAI,CAAC,KAAK,CAAC,YAAX,EAAyB;AACrB,QAAI,SAAS,GAAG,IAAI,GAAJ,CAAQ,CAAC,UAAD,CAAR,CAAhB;AACA,IAAA,SAAS,CAAC,OAAV,CAAkB,UAAU,KAAV,EAAiB;AAC/B,UAAI,KAAK,IAAI,OAAO,KAAP,KAAiB,QAA9B,EAAwC;AACpC,QAAA,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,SAAS,CAAC,CAAC,WAAW,CAAC,KAAD,CAAb,EAAsB,EAAtB,CAAjD,GAA6E,SAAS,CAAC,CAAC,WAAW,CAAC,KAAD,CAAb,EAAsB,8CAA8C,0BAA0B,CAAC,KAAD,EAAQ,KAAR,CAAxE,GAAyF,4BAAzF,GAAwH,KAAK,CAAC,IAAN,CAAW,KAAzJ,CAAtF;AACA,QAAA,MAAM,CAAC,MAAP,CAAc,KAAd,EAAqB,OAArB,CAA6B,SAAS,CAAC,GAAvC,EAA4C,SAA5C;AACH;AACJ,KALD;AAMH;AACJ","sourcesContent":["import { __assign } from \"tslib\";\nimport { wrap } from 'optimism';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { isField, isInlineFragment, resultKeyNameFromField, isReference, makeReference, } from '../../utilities/graphql/storeUtils';\nimport { createFragmentMap } from '../../utilities/graphql/fragments';\nimport { shouldInclude } from '../../utilities/graphql/directives';\nimport { getDefaultValues, getFragmentDefinitions, getMainDefinition, getQueryDefinition, } from '../../utilities/graphql/getFromAST';\nimport { maybeDeepFreeze } from '../../utilities/common/maybeDeepFreeze';\nimport { mergeDeepArray } from '../../utilities/common/mergeDeep';\nimport { supportsResultCaching } from './entityStore';\nimport { getTypenameFromStoreObject } from './helpers';\n;\nvar StoreReader = (function () {\n    function StoreReader(config) {\n        var _this = this;\n        this.config = config;\n        this.config = __assign({ addTypename: true }, config);\n        var _a = this, executeSelectionSet = _a.executeSelectionSet, executeSubSelectedArray = _a.executeSubSelectedArray;\n        this.executeSelectionSet = wrap(function (options) {\n            return executeSelectionSet.call(_this, options);\n        }, {\n            makeCacheKey: function (_a) {\n                var selectionSet = _a.selectionSet, objectOrReference = _a.objectOrReference, context = _a.context;\n                if (supportsResultCaching(context.store)) {\n                    return context.store.makeCacheKey(selectionSet, JSON.stringify(context.variables), isReference(objectOrReference)\n                        ? objectOrReference.__ref\n                        : objectOrReference);\n                }\n            }\n        });\n        this.executeSubSelectedArray = wrap(function (options) {\n            return executeSubSelectedArray.call(_this, options);\n        }, {\n            makeCacheKey: function (_a) {\n                var field = _a.field, array = _a.array, context = _a.context;\n                if (supportsResultCaching(context.store)) {\n                    return context.store.makeCacheKey(field, array, JSON.stringify(context.variables));\n                }\n            }\n        });\n    }\n    StoreReader.prototype.readQueryFromStore = function (options) {\n        return this.diffQueryAgainstStore(__assign(__assign({}, options), { returnPartialData: false })).result;\n    };\n    StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n        var store = _a.store, query = _a.query, variables = _a.variables, _b = _a.returnPartialData, returnPartialData = _b === void 0 ? true : _b, _c = _a.rootId, rootId = _c === void 0 ? 'ROOT_QUERY' : _c, config = _a.config;\n        var policies = this.config.policies;\n        var execResult = this.executeSelectionSet({\n            selectionSet: getMainDefinition(query).selectionSet,\n            objectOrReference: makeReference(rootId),\n            context: {\n                store: store,\n                query: query,\n                policies: policies,\n                variables: __assign(__assign({}, getDefaultValues(getQueryDefinition(query))), variables),\n                fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n                getFieldValue: policies.makeFieldValueGetter(store),\n            },\n        });\n        var hasMissingFields = execResult.missing && execResult.missing.length > 0;\n        if (hasMissingFields && !returnPartialData) {\n            execResult.missing.forEach(function (info) {\n                throw new InvariantError(\"Can't find field \" + info.fieldName + \" on object \" + JSON.stringify(info.object, null, 2) + \".\");\n            });\n        }\n        return {\n            result: execResult.result,\n            complete: !hasMissingFields,\n        };\n    };\n    StoreReader.prototype.executeSelectionSet = function (_a) {\n        var _this = this;\n        var selectionSet = _a.selectionSet, objectOrReference = _a.objectOrReference, context = _a.context;\n        var fragmentMap = context.fragmentMap, variables = context.variables, policies = context.policies, getFieldValue = context.getFieldValue;\n        var objectsToMerge = [];\n        var finalResult = { result: null };\n        var typename = getFieldValue(objectOrReference, \"__typename\");\n        if (this.config.addTypename &&\n            typeof typename === \"string\" &&\n            Object.values(policies.rootTypenamesById).indexOf(typename) < 0) {\n            objectsToMerge.push({ __typename: typename });\n        }\n        function getMissing() {\n            return finalResult.missing || (finalResult.missing = []);\n        }\n        function handleMissing(result) {\n            var _a;\n            if (result.missing)\n                (_a = getMissing()).push.apply(_a, result.missing);\n            return result.result;\n        }\n        selectionSet.selections.forEach(function (selection) {\n            var _a;\n            if (!shouldInclude(selection, variables))\n                return;\n            if (isField(selection)) {\n                var fieldValue = policies.readField(objectOrReference, selection, getFieldValue, variables, typename);\n                if (fieldValue === void 0) {\n                    getMissing().push({\n                        object: objectOrReference,\n                        fieldName: selection.name.value,\n                    });\n                }\n                else if (Array.isArray(fieldValue)) {\n                    fieldValue = handleMissing(_this.executeSubSelectedArray({\n                        field: selection,\n                        array: fieldValue,\n                        context: context,\n                    }));\n                }\n                else if (!selection.selectionSet) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        assertSelectionSetForIdValue(context.store, selection, fieldValue);\n                        maybeDeepFreeze(fieldValue);\n                    }\n                }\n                else if (fieldValue != null) {\n                    fieldValue = handleMissing(_this.executeSelectionSet({\n                        selectionSet: selection.selectionSet,\n                        objectOrReference: fieldValue,\n                        context: context,\n                    }));\n                }\n                if (fieldValue !== void 0) {\n                    objectsToMerge.push((_a = {},\n                        _a[resultKeyNameFromField(selection)] = fieldValue,\n                        _a));\n                }\n            }\n            else {\n                var fragment = void 0;\n                if (isInlineFragment(selection)) {\n                    fragment = selection;\n                }\n                else {\n                    invariant(fragment = fragmentMap[selection.name.value], \"No fragment named \" + selection.name.value);\n                }\n                if (policies.fragmentMatches(fragment, typename)) {\n                    objectsToMerge.push(handleMissing(_this.executeSelectionSet({\n                        selectionSet: fragment.selectionSet,\n                        objectOrReference: objectOrReference,\n                        context: context,\n                    })));\n                }\n            }\n        });\n        finalResult.result = mergeDeepArray(objectsToMerge);\n        if (process.env.NODE_ENV !== 'production') {\n            Object.freeze(finalResult.result);\n        }\n        return finalResult;\n    };\n    StoreReader.prototype.executeSubSelectedArray = function (_a) {\n        var _this = this;\n        var field = _a.field, array = _a.array, context = _a.context;\n        var missing;\n        function handleMissing(childResult) {\n            if (childResult.missing) {\n                missing = missing || [];\n                missing.push.apply(missing, childResult.missing);\n            }\n            return childResult.result;\n        }\n        array = array.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            if (Array.isArray(item)) {\n                return handleMissing(_this.executeSubSelectedArray({\n                    field: field,\n                    array: item,\n                    context: context,\n                }));\n            }\n            if (field.selectionSet) {\n                return handleMissing(_this.executeSelectionSet({\n                    selectionSet: field.selectionSet,\n                    objectOrReference: item,\n                    context: context,\n                }));\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                assertSelectionSetForIdValue(context.store, field, item);\n            }\n            return item;\n        });\n        if (process.env.NODE_ENV !== 'production') {\n            Object.freeze(array);\n        }\n        return { result: array, missing: missing };\n    };\n    return StoreReader;\n}());\nexport { StoreReader };\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n    if (!field.selectionSet) {\n        var workSet_1 = new Set([fieldValue]);\n        workSet_1.forEach(function (value) {\n            if (value && typeof value === \"object\") {\n                invariant(!isReference(value), \"Missing selection set for object of type \" + getTypenameFromStoreObject(store, value) + \" returned for query field \" + field.name.value);\n                Object.values(value).forEach(workSet_1.add, workSet_1);\n            }\n        });\n    }\n}\n//# sourceMappingURL=readFromStore.js.map"]},"metadata":{},"sourceType":"module"}