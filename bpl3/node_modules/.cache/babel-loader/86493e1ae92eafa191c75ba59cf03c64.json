{"ast":null,"code":"import { isReference, isField } from '../../utilities/graphql/storeUtils.js';\nimport { DeepMerger } from '../../utilities/common/mergeDeep.js';\n\nfunction getTypenameFromStoreObject(store, objectOrReference) {\n  return isReference(objectOrReference) ? store.getFieldValue(objectOrReference.__ref, \"__typename\") : objectOrReference && objectOrReference.__typename;\n}\n\nvar FieldNamePattern = /^[_A-Za-z0-9]+/;\n\nfunction fieldNameFromStoreName(storeFieldName) {\n  var match = storeFieldName.match(FieldNamePattern);\n  return match && match[0];\n}\n\nfunction isFieldValueToBeMerged(value) {\n  var field = value && value.__field;\n  return field && isField(field);\n}\n\nfunction makeProcessedFieldsMerger() {\n  return new DeepMerger(reconcileProcessedFields);\n}\n\nvar reconcileProcessedFields = function (existingObject, incomingObject, property) {\n  var existing = existingObject[property];\n  var incoming = incomingObject[property];\n\n  if (isFieldValueToBeMerged(existing)) {\n    existing.__value = this.merge(existing.__value, isFieldValueToBeMerged(incoming) ? incoming.__value : incoming);\n    return existing;\n  }\n\n  if (isFieldValueToBeMerged(incoming)) {\n    incoming.__value = this.merge(existing, incoming.__value);\n    return incoming;\n  }\n\n  return this.merge(existing, incoming);\n};\n\nexport { fieldNameFromStoreName, getTypenameFromStoreObject, isFieldValueToBeMerged, makeProcessedFieldsMerger };","map":{"version":3,"sources":["helpers.js"],"names":[],"mappings":";;;AAEO,SAAS,0BAAT,CAAoC,KAApC,EAA2C,iBAA3C,EAA8D;AACjE,SAAO,WAAW,CAAC,iBAAD,CAAX,GACD,KAAK,CAAC,aAAN,CAAoB,iBAAiB,CAAC,KAAtC,EAA6C,YAA7C,CADC,GAED,iBAAiB,IAAI,iBAAiB,CAAC,UAF7C;AAGH;;AACD,IAAI,gBAAgB,GAAG,gBAAvB;;AACO,SAAS,sBAAT,CAAgC,cAAhC,EAAgD;AACnD,MAAI,KAAK,GAAG,cAAc,CAAC,KAAf,CAAqB,gBAArB,CAAZ;AACA,SAAO,KAAK,IAAI,KAAK,CAAC,CAAD,CAArB;AACH;;AACM,SAAS,sBAAT,CAAgC,KAAhC,EAAuC;AAC1C,MAAI,KAAK,GAAG,KAAK,IAAI,KAAK,CAAC,OAA3B;AACA,SAAO,KAAK,IAAI,OAAO,CAAC,KAAD,CAAvB;AACH;;AACM,SAAS,yBAAT,GAAqC;AACxC,SAAO,IAAI,UAAJ,CAAe,wBAAf,CAAP;AACH;;AACD,IAAI,wBAAwB,GAAG,UAAU,cAAV,EAA0B,cAA1B,EAA0C,QAA1C,EAAoD;AAC/E,MAAI,QAAQ,GAAG,cAAc,CAAC,QAAD,CAA7B;AACA,MAAI,QAAQ,GAAG,cAAc,CAAC,QAAD,CAA7B;;AACA,MAAI,sBAAsB,CAAC,QAAD,CAA1B,EAAsC;AAClC,IAAA,QAAQ,CAAC,OAAT,GAAmB,KAAK,KAAL,CAAW,QAAQ,CAAC,OAApB,EAA6B,sBAAsB,CAAC,QAAD,CAAtB,GAC1C,QAAQ,CAAC,OADiC,GAE1C,QAFa,CAAnB;AAGA,WAAO,QAAP;AACH;;AACD,MAAI,sBAAsB,CAAC,QAAD,CAA1B,EAAsC;AAClC,IAAA,QAAQ,CAAC,OAAT,GAAmB,KAAK,KAAL,CAAW,QAAX,EAAqB,QAAQ,CAAC,OAA9B,CAAnB;AACA,WAAO,QAAP;AACH;;AACD,SAAO,KAAK,KAAL,CAAW,QAAX,EAAqB,QAArB,CAAP;AACH,CAdD","sourcesContent":["import { isReference, isField } from '../../utilities/graphql/storeUtils';\nimport { DeepMerger } from '../../utilities/common/mergeDeep';\nexport function getTypenameFromStoreObject(store, objectOrReference) {\n    return isReference(objectOrReference)\n        ? store.getFieldValue(objectOrReference.__ref, \"__typename\")\n        : objectOrReference && objectOrReference.__typename;\n}\nvar FieldNamePattern = /^[_A-Za-z0-9]+/;\nexport function fieldNameFromStoreName(storeFieldName) {\n    var match = storeFieldName.match(FieldNamePattern);\n    return match && match[0];\n}\nexport function isFieldValueToBeMerged(value) {\n    var field = value && value.__field;\n    return field && isField(field);\n}\nexport function makeProcessedFieldsMerger() {\n    return new DeepMerger(reconcileProcessedFields);\n}\nvar reconcileProcessedFields = function (existingObject, incomingObject, property) {\n    var existing = existingObject[property];\n    var incoming = incomingObject[property];\n    if (isFieldValueToBeMerged(existing)) {\n        existing.__value = this.merge(existing.__value, isFieldValueToBeMerged(incoming)\n            ? incoming.__value\n            : incoming);\n        return existing;\n    }\n    if (isFieldValueToBeMerged(incoming)) {\n        incoming.__value = this.merge(existing, incoming.__value);\n        return incoming;\n    }\n    return this.merge(existing, incoming);\n};\n//# sourceMappingURL=helpers.js.map"]},"metadata":{},"sourceType":"module"}