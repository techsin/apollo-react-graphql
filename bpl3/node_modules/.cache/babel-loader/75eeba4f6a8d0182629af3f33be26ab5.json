{"ast":null,"code":"import { __extends, __assign } from 'tslib';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport Observable from 'zen-observable';\nimport 'symbol-observable';\nimport { getOperationDefinition } from '../utilities/graphql/getFromAST.js';\nimport { tryFunctionOrLogError } from '../utilities/common/errorHandling.js';\nimport { isNonEmptyArray } from '../utilities/common/arrays.js';\nimport { ApolloError } from '../errors/ApolloError.js';\nimport { equal } from '@wry/equality';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus.js';\nimport { cloneDeep } from '../utilities/common/cloneDeep.js';\nimport { FetchType } from './types.js';\n\nvar hasError = function (storeValue, policy) {\n  if (policy === void 0) {\n    policy = 'none';\n  }\n\n  return storeValue && (storeValue.networkError || policy === 'none' && isNonEmptyArray(storeValue.graphQLErrors));\n};\n\nvar ObservableQuery = function (_super) {\n  __extends(ObservableQuery, _super);\n\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n        options = _a.options,\n        _b = _a.shouldSubscribe,\n        shouldSubscribe = _b === void 0 ? true : _b;\n\n    var _this = _super.call(this, function (observer) {\n      return _this.onSubscribe(observer);\n    }) || this;\n\n    _this.observers = new Set();\n    _this.subscriptions = new Set();\n    _this.isTornDown = false;\n    _this.options = options;\n    _this.variables = options.variables || {};\n    _this.queryId = queryManager.generateQueryId();\n    _this.shouldSubscribe = shouldSubscribe;\n    var opDef = getOperationDefinition(options.query);\n    _this.queryName = opDef && opDef.name && opDef.name.value;\n    _this.queryManager = queryManager;\n    return _this;\n  }\n\n  ObservableQuery.prototype.result = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var observer = {\n        next: function (result) {\n          resolve(result);\n\n          _this.observers.delete(observer);\n\n          if (!_this.observers.size) {\n            _this.queryManager.removeQuery(_this.queryId);\n          }\n\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject\n      };\n\n      var subscription = _this.subscribe(observer);\n    });\n  };\n\n  ObservableQuery.prototype.getCurrentResult = function () {\n    var _a = this,\n        lastResult = _a.lastResult,\n        lastError = _a.lastError;\n\n    var fetchPolicy = this.options.fetchPolicy;\n    var isNetworkFetchPolicy = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n    var networkStatus = lastError ? NetworkStatus.error : lastResult ? lastResult.networkStatus : isNetworkFetchPolicy ? NetworkStatus.loading : NetworkStatus.ready;\n    var result = {\n      data: !lastError && lastResult && lastResult.data || void 0,\n      error: this.lastError,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus,\n      stale: lastResult ? lastResult.stale : false\n    };\n\n    if (this.isTornDown) {\n      return result;\n    }\n\n    var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n\n    if (queryStoreValue) {\n      var networkStatus_1 = queryStoreValue.networkStatus;\n\n      if (hasError(queryStoreValue, this.options.errorPolicy)) {\n        return Object.assign(result, {\n          data: void 0,\n          networkStatus: networkStatus_1,\n          error: new ApolloError({\n            graphQLErrors: queryStoreValue.graphQLErrors,\n            networkError: queryStoreValue.networkError\n          })\n        });\n      }\n\n      if (queryStoreValue.variables) {\n        this.options.variables = __assign(__assign({}, this.options.variables), queryStoreValue.variables);\n        this.variables = this.options.variables;\n      }\n\n      Object.assign(result, {\n        loading: isNetworkRequestInFlight(networkStatus_1),\n        networkStatus: networkStatus_1\n      });\n\n      if (queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n        result.errors = queryStoreValue.graphQLErrors;\n      }\n    }\n\n    this.updateLastResult(result);\n    return result;\n  };\n\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n    var snapshot = this.lastResultSnapshot;\n    return !(snapshot && newResult && snapshot.networkStatus === newResult.networkStatus && snapshot.stale === newResult.stale && equal(snapshot.data, newResult.data));\n  };\n\n  ObservableQuery.prototype.getLastResult = function () {\n    return this.lastResult;\n  };\n\n  ObservableQuery.prototype.getLastError = function () {\n    return this.lastError;\n  };\n\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.lastResult;\n    delete this.lastResultSnapshot;\n    delete this.lastError;\n    this.isTornDown = false;\n  };\n\n  ObservableQuery.prototype.resetQueryStoreErrors = function () {\n    var queryStore = this.queryManager.queryStore.get(this.queryId);\n\n    if (queryStore) {\n      queryStore.networkError = null;\n      queryStore.graphQLErrors = [];\n    }\n  };\n\n  ObservableQuery.prototype.refetch = function (variables) {\n    var fetchPolicy = this.options.fetchPolicy;\n\n    if (fetchPolicy === 'cache-only') {\n      return Promise.reject(process.env.NODE_ENV === \"production\" ? new InvariantError(3) : new InvariantError('cache-only fetchPolicy option should not be used together with query refetch.'));\n    }\n\n    if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'cache-and-network') {\n      fetchPolicy = 'network-only';\n    }\n\n    if (!equal(this.variables, variables)) {\n      this.variables = __assign(__assign({}, this.variables), variables);\n    }\n\n    if (!equal(this.options.variables, this.variables)) {\n      this.options.variables = __assign(__assign({}, this.options.variables), this.variables);\n    }\n\n    return this.queryManager.fetchQuery(this.queryId, __assign(__assign({}, this.options), {\n      fetchPolicy: fetchPolicy\n    }), FetchType.refetch);\n  };\n\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n\n    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign({}, this.options), fetchMoreOptions), {\n      variables: __assign(__assign({}, this.variables), fetchMoreOptions.variables)\n    })), {\n      fetchPolicy: 'network-only'\n    });\n\n    var qid = this.queryManager.generateQueryId();\n    return this.queryManager.fetchQuery(qid, combinedOptions, FetchType.normal, this.queryId).then(function (fetchMoreResult) {\n      _this.updateQuery(function (previousResult) {\n        var data = fetchMoreResult.data;\n        var updateQuery = fetchMoreOptions.updateQuery;\n        return updateQuery ? updateQuery(previousResult, {\n          fetchMoreResult: data,\n          variables: combinedOptions.variables\n        }) : data;\n      });\n\n      _this.queryManager.stopQuery(qid);\n\n      return fetchMoreResult;\n    }, function (error) {\n      _this.queryManager.stopQuery(qid);\n\n      throw error;\n    });\n  };\n\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables\n    }).subscribe({\n      next: function (subscriptionData) {\n        var updateQuery = options.updateQuery;\n\n        if (updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function (err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n\n        process.env.NODE_ENV === \"production\" || invariant.error('Unhandled GraphQL subscription error', err);\n      }\n    });\n    this.subscriptions.add(subscription);\n    return function () {\n      if (_this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n\n  ObservableQuery.prototype.setOptions = function (opts) {\n    var oldFetchPolicy = this.options.fetchPolicy;\n    this.options = __assign(__assign({}, this.options), opts);\n\n    if (opts.pollInterval) {\n      this.startPolling(opts.pollInterval);\n    } else if (opts.pollInterval === 0) {\n      this.stopPolling();\n    }\n\n    var fetchPolicy = opts.fetchPolicy;\n    return this.setVariables(this.options.variables, oldFetchPolicy !== fetchPolicy && (oldFetchPolicy === 'cache-only' || oldFetchPolicy === 'standby' || fetchPolicy === 'network-only'), opts.fetchResults);\n  };\n\n  ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n    if (tryFetch === void 0) {\n      tryFetch = false;\n    }\n\n    if (fetchResults === void 0) {\n      fetchResults = true;\n    }\n\n    this.isTornDown = false;\n    variables = variables || this.variables;\n\n    if (!tryFetch && equal(variables, this.variables)) {\n      return this.observers.size && fetchResults ? this.result() : Promise.resolve();\n    }\n\n    this.variables = this.options.variables = variables;\n\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.queryManager.fetchQuery(this.queryId, this.options);\n  };\n\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var queryManager = this.queryManager;\n\n    var _a = queryManager.getQueryWithPreviousResult(this.queryId),\n        previousResult = _a.previousResult,\n        variables = _a.variables,\n        document = _a.document;\n\n    var newResult = tryFunctionOrLogError(function () {\n      return mapFn(previousResult, {\n        variables: variables\n      });\n    });\n\n    if (newResult) {\n      queryManager.cache.write({\n        query: document,\n        result: newResult,\n        dataId: 'ROOT_QUERY',\n        variables: variables\n      });\n      queryManager.broadcastQueries();\n    }\n  };\n\n  ObservableQuery.prototype.stopPolling = function () {\n    this.queryManager.stopPollingQuery(this.queryId);\n    this.options.pollInterval = undefined;\n  };\n\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    assertNotCacheFirstOrOnly(this);\n    this.options.pollInterval = pollInterval;\n    this.queryManager.startPollingQuery(this.options, this.queryId);\n  };\n\n  ObservableQuery.prototype.updateLastResult = function (newResult) {\n    var previousResult = this.lastResult;\n    this.lastResult = newResult;\n    this.lastResultSnapshot = this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult);\n\n    if (!isNonEmptyArray(newResult.errors)) {\n      delete this.lastError;\n    }\n\n    return previousResult;\n  };\n\n  ObservableQuery.prototype.onSubscribe = function (observer) {\n    var _this = this;\n\n    try {\n      var subObserver = observer._subscription._observer;\n\n      if (subObserver && !subObserver.error) {\n        subObserver.error = defaultSubscriptionObserverErrorCallback;\n      }\n    } catch (_a) {}\n\n    var first = !this.observers.size;\n    this.observers.add(observer);\n    if (observer.next && this.lastResult) observer.next(this.lastResult);\n    if (observer.error && this.lastError) observer.error(this.lastError);\n\n    if (first) {\n      this.setUpQuery();\n    }\n\n    return function () {\n      if (_this.observers.delete(observer) && !_this.observers.size) {\n        _this.tearDownQuery();\n      }\n    };\n  };\n\n  ObservableQuery.prototype.setUpQuery = function () {\n    var _this = this;\n\n    var _a = this,\n        queryManager = _a.queryManager,\n        queryId = _a.queryId;\n\n    if (this.shouldSubscribe) {\n      queryManager.addObservableQuery(queryId, this);\n    }\n\n    if (this.options.pollInterval) {\n      assertNotCacheFirstOrOnly(this);\n      queryManager.startPollingQuery(this.options, queryId);\n    }\n\n    var onError = function (error) {\n      _this.updateLastResult(__assign(__assign({}, _this.lastResult), {\n        errors: error.graphQLErrors,\n        networkStatus: NetworkStatus.error,\n        loading: false\n      }));\n\n      iterateObserversSafely(_this.observers, 'error', _this.lastError = error);\n    };\n\n    queryManager.observeQuery(queryId, this.options, {\n      next: function (result) {\n        if (_this.lastError || _this.isDifferentFromLastResult(result)) {\n          var previousResult_1 = _this.updateLastResult(result);\n\n          var _a = _this.options,\n              query_1 = _a.query,\n              variables = _a.variables,\n              fetchPolicy_1 = _a.fetchPolicy;\n\n          if (queryManager.transform(query_1).hasClientExports) {\n            queryManager.getLocalState().addExportedVariables(query_1, variables).then(function (variables) {\n              var previousVariables = _this.variables;\n              _this.variables = _this.options.variables = variables;\n\n              if (!result.loading && previousResult_1 && fetchPolicy_1 !== 'cache-only' && queryManager.transform(query_1).serverQuery && !equal(previousVariables, variables)) {\n                _this.refetch();\n              } else {\n                iterateObserversSafely(_this.observers, 'next', result);\n              }\n            });\n          } else {\n            iterateObserversSafely(_this.observers, 'next', result);\n          }\n        }\n      },\n      error: onError\n    }).catch(onError);\n  };\n\n  ObservableQuery.prototype.tearDownQuery = function () {\n    var queryManager = this.queryManager;\n    this.isTornDown = true;\n    queryManager.stopPollingQuery(this.queryId);\n    this.subscriptions.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptions.clear();\n    queryManager.removeObservableQuery(this.queryId);\n    queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n  };\n\n  return ObservableQuery;\n}(Observable);\n\nfunction defaultSubscriptionObserverErrorCallback(error) {\n  process.env.NODE_ENV === \"production\" || invariant.error('Unhandled error', error.message, error.stack);\n}\n\nfunction iterateObserversSafely(observers, method, argument) {\n  var observersWithMethod = [];\n  observers.forEach(function (obs) {\n    return obs[method] && observersWithMethod.push(obs);\n  });\n  observersWithMethod.forEach(function (obs) {\n    return obs[method](argument);\n  });\n}\n\nfunction assertNotCacheFirstOrOnly(obsQuery) {\n  var fetchPolicy = obsQuery.options.fetchPolicy;\n  process.env.NODE_ENV === \"production\" ? invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 4) : invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 'Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n}\n\nexport { ObservableQuery, hasError };","map":{"version":3,"sources":["ObservableQuery.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { equal } from '@wry/equality';\nimport { tryFunctionOrLogError } from '../utilities/common/errorHandling';\nimport { cloneDeep } from '../utilities/common/cloneDeep';\nimport { getOperationDefinition } from '../utilities/graphql/getFromAST';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { Observable } from '../utilities/observables/Observable';\nimport { ApolloError } from '../errors/ApolloError';\nimport { FetchType } from './types';\nimport { isNonEmptyArray } from '../utilities/common/arrays';\nexport var hasError = function (storeValue, policy) {\n    if (policy === void 0) { policy = 'none'; }\n    return storeValue && (storeValue.networkError ||\n        (policy === 'none' && isNonEmptyArray(storeValue.graphQLErrors)));\n};\nvar ObservableQuery = (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, options = _a.options, _b = _a.shouldSubscribe, shouldSubscribe = _b === void 0 ? true : _b;\n        var _this = _super.call(this, function (observer) {\n            return _this.onSubscribe(observer);\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        _this.isTornDown = false;\n        _this.options = options;\n        _this.variables = options.variables || {};\n        _this.queryId = queryManager.generateQueryId();\n        _this.shouldSubscribe = shouldSubscribe;\n        var opDef = getOperationDefinition(options.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        _this.queryManager = queryManager;\n        return _this;\n    }\n    ObservableQuery.prototype.result = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject,\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    ObservableQuery.prototype.getCurrentResult = function () {\n        var _a = this, lastResult = _a.lastResult, lastError = _a.lastError;\n        var fetchPolicy = this.options.fetchPolicy;\n        var isNetworkFetchPolicy = fetchPolicy === 'network-only' ||\n            fetchPolicy === 'no-cache';\n        var networkStatus = lastError ? NetworkStatus.error :\n            lastResult ? lastResult.networkStatus :\n                isNetworkFetchPolicy ? NetworkStatus.loading :\n                    NetworkStatus.ready;\n        var result = {\n            data: !lastError && lastResult && lastResult.data || void 0,\n            error: this.lastError,\n            loading: isNetworkRequestInFlight(networkStatus),\n            networkStatus: networkStatus,\n            stale: lastResult ? lastResult.stale : false,\n        };\n        if (this.isTornDown) {\n            return result;\n        }\n        var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n        if (queryStoreValue) {\n            var networkStatus_1 = queryStoreValue.networkStatus;\n            if (hasError(queryStoreValue, this.options.errorPolicy)) {\n                return Object.assign(result, {\n                    data: void 0,\n                    networkStatus: networkStatus_1,\n                    error: new ApolloError({\n                        graphQLErrors: queryStoreValue.graphQLErrors,\n                        networkError: queryStoreValue.networkError,\n                    }),\n                });\n            }\n            if (queryStoreValue.variables) {\n                this.options.variables = __assign(__assign({}, this.options.variables), queryStoreValue.variables);\n                this.variables = this.options.variables;\n            }\n            Object.assign(result, {\n                loading: isNetworkRequestInFlight(networkStatus_1),\n                networkStatus: networkStatus_1,\n            });\n            if (queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n                result.errors = queryStoreValue.graphQLErrors;\n            }\n        }\n        this.updateLastResult(result);\n        return result;\n    };\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n        var snapshot = this.lastResultSnapshot;\n        return !(snapshot &&\n            newResult &&\n            snapshot.networkStatus === newResult.networkStatus &&\n            snapshot.stale === newResult.stale &&\n            equal(snapshot.data, newResult.data));\n    };\n    ObservableQuery.prototype.getLastResult = function () {\n        return this.lastResult;\n    };\n    ObservableQuery.prototype.getLastError = function () {\n        return this.lastError;\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.lastResult;\n        delete this.lastResultSnapshot;\n        delete this.lastError;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.resetQueryStoreErrors = function () {\n        var queryStore = this.queryManager.queryStore.get(this.queryId);\n        if (queryStore) {\n            queryStore.networkError = null;\n            queryStore.graphQLErrors = [];\n        }\n    };\n    ObservableQuery.prototype.refetch = function (variables) {\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === 'cache-only') {\n            return Promise.reject(new InvariantError('cache-only fetchPolicy option should not be used together with query refetch.'));\n        }\n        if (fetchPolicy !== 'no-cache' &&\n            fetchPolicy !== 'cache-and-network') {\n            fetchPolicy = 'network-only';\n        }\n        if (!equal(this.variables, variables)) {\n            this.variables = __assign(__assign({}, this.variables), variables);\n        }\n        if (!equal(this.options.variables, this.variables)) {\n            this.options.variables = __assign(__assign({}, this.options.variables), this.variables);\n        }\n        return this.queryManager.fetchQuery(this.queryId, __assign(__assign({}, this.options), { fetchPolicy: fetchPolicy }), FetchType.refetch);\n    };\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        var combinedOptions = __assign(__assign({}, (fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign({}, this.options), fetchMoreOptions), { variables: __assign(__assign({}, this.variables), fetchMoreOptions.variables) }))), { fetchPolicy: 'network-only' });\n        var qid = this.queryManager.generateQueryId();\n        return this.queryManager\n            .fetchQuery(qid, combinedOptions, FetchType.normal, this.queryId)\n            .then(function (fetchMoreResult) {\n            _this.updateQuery(function (previousResult) {\n                var data = fetchMoreResult.data;\n                var updateQuery = fetchMoreOptions.updateQuery;\n                return updateQuery ? updateQuery(previousResult, {\n                    fetchMoreResult: data,\n                    variables: combinedOptions.variables,\n                }) : data;\n            });\n            _this.queryManager.stopQuery(qid);\n            return fetchMoreResult;\n        }, function (error) {\n            _this.queryManager.stopQuery(qid);\n            throw error;\n        });\n    };\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                invariant.error('Unhandled GraphQL subscription error', err);\n            },\n        });\n        this.subscriptions.add(subscription);\n        return function () {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (opts) {\n        var oldFetchPolicy = this.options.fetchPolicy;\n        this.options = __assign(__assign({}, this.options), opts);\n        if (opts.pollInterval) {\n            this.startPolling(opts.pollInterval);\n        }\n        else if (opts.pollInterval === 0) {\n            this.stopPolling();\n        }\n        var fetchPolicy = opts.fetchPolicy;\n        return this.setVariables(this.options.variables, oldFetchPolicy !== fetchPolicy && (oldFetchPolicy === 'cache-only' ||\n            oldFetchPolicy === 'standby' ||\n            fetchPolicy === 'network-only'), opts.fetchResults);\n    };\n    ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n        if (tryFetch === void 0) { tryFetch = false; }\n        if (fetchResults === void 0) { fetchResults = true; }\n        this.isTornDown = false;\n        variables = variables || this.variables;\n        if (!tryFetch && equal(variables, this.variables)) {\n            return this.observers.size && fetchResults\n                ? this.result()\n                : Promise.resolve();\n        }\n        this.variables = this.options.variables = variables;\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        return this.queryManager.fetchQuery(this.queryId, this.options);\n    };\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var queryManager = this.queryManager;\n        var _a = queryManager.getQueryWithPreviousResult(this.queryId), previousResult = _a.previousResult, variables = _a.variables, document = _a.document;\n        var newResult = tryFunctionOrLogError(function () {\n            return mapFn(previousResult, { variables: variables });\n        });\n        if (newResult) {\n            queryManager.cache.write({\n                query: document,\n                result: newResult,\n                dataId: 'ROOT_QUERY',\n                variables: variables,\n            });\n            queryManager.broadcastQueries();\n        }\n    };\n    ObservableQuery.prototype.stopPolling = function () {\n        this.queryManager.stopPollingQuery(this.queryId);\n        this.options.pollInterval = undefined;\n    };\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        assertNotCacheFirstOrOnly(this);\n        this.options.pollInterval = pollInterval;\n        this.queryManager.startPollingQuery(this.options, this.queryId);\n    };\n    ObservableQuery.prototype.updateLastResult = function (newResult) {\n        var previousResult = this.lastResult;\n        this.lastResult = newResult;\n        this.lastResultSnapshot = this.queryManager.assumeImmutableResults\n            ? newResult\n            : cloneDeep(newResult);\n        if (!isNonEmptyArray(newResult.errors)) {\n            delete this.lastError;\n        }\n        return previousResult;\n    };\n    ObservableQuery.prototype.onSubscribe = function (observer) {\n        var _this = this;\n        try {\n            var subObserver = observer._subscription._observer;\n            if (subObserver && !subObserver.error) {\n                subObserver.error = defaultSubscriptionObserverErrorCallback;\n            }\n        }\n        catch (_a) { }\n        var first = !this.observers.size;\n        this.observers.add(observer);\n        if (observer.next && this.lastResult)\n            observer.next(this.lastResult);\n        if (observer.error && this.lastError)\n            observer.error(this.lastError);\n        if (first) {\n            this.setUpQuery();\n        }\n        return function () {\n            if (_this.observers.delete(observer) && !_this.observers.size) {\n                _this.tearDownQuery();\n            }\n        };\n    };\n    ObservableQuery.prototype.setUpQuery = function () {\n        var _this = this;\n        var _a = this, queryManager = _a.queryManager, queryId = _a.queryId;\n        if (this.shouldSubscribe) {\n            queryManager.addObservableQuery(queryId, this);\n        }\n        if (this.options.pollInterval) {\n            assertNotCacheFirstOrOnly(this);\n            queryManager.startPollingQuery(this.options, queryId);\n        }\n        var onError = function (error) {\n            _this.updateLastResult(__assign(__assign({}, _this.lastResult), { errors: error.graphQLErrors, networkStatus: NetworkStatus.error, loading: false }));\n            iterateObserversSafely(_this.observers, 'error', _this.lastError = error);\n        };\n        queryManager.observeQuery(queryId, this.options, {\n            next: function (result) {\n                if (_this.lastError || _this.isDifferentFromLastResult(result)) {\n                    var previousResult_1 = _this.updateLastResult(result);\n                    var _a = _this.options, query_1 = _a.query, variables = _a.variables, fetchPolicy_1 = _a.fetchPolicy;\n                    if (queryManager.transform(query_1).hasClientExports) {\n                        queryManager.getLocalState().addExportedVariables(query_1, variables).then(function (variables) {\n                            var previousVariables = _this.variables;\n                            _this.variables = _this.options.variables = variables;\n                            if (!result.loading &&\n                                previousResult_1 &&\n                                fetchPolicy_1 !== 'cache-only' &&\n                                queryManager.transform(query_1).serverQuery &&\n                                !equal(previousVariables, variables)) {\n                                _this.refetch();\n                            }\n                            else {\n                                iterateObserversSafely(_this.observers, 'next', result);\n                            }\n                        });\n                    }\n                    else {\n                        iterateObserversSafely(_this.observers, 'next', result);\n                    }\n                }\n            },\n            error: onError,\n        }).catch(onError);\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        var queryManager = this.queryManager;\n        this.isTornDown = true;\n        queryManager.stopPollingQuery(this.queryId);\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptions.clear();\n        queryManager.removeObservableQuery(this.queryId);\n        queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n    };\n    return ObservableQuery;\n}(Observable));\nexport { ObservableQuery };\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    invariant.error('Unhandled error', error.message, error.stack);\n}\nfunction iterateObserversSafely(observers, method, argument) {\n    var observersWithMethod = [];\n    observers.forEach(function (obs) { return obs[method] && observersWithMethod.push(obs); });\n    observersWithMethod.forEach(function (obs) { return obs[method](argument); });\n}\nfunction assertNotCacheFirstOrOnly(obsQuery) {\n    var fetchPolicy = obsQuery.options.fetchPolicy;\n    invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 'Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n}\n//# sourceMappingURL=ObservableQuery.js.map"]},"metadata":{},"sourceType":"module"}