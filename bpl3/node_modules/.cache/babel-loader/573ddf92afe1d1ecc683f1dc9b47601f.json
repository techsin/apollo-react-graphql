{"ast":null,"code":"import { invariant } from 'ts-invariant';\nimport { isNonEmptyArray } from '../utilities/common/arrays.js';\nimport { equal } from '@wry/equality';\nimport { NetworkStatus } from '../core/networkStatus.js';\n\nvar QueryStore = function () {\n  function QueryStore() {\n    this.store = {};\n  }\n\n  QueryStore.prototype.getStore = function () {\n    return this.store;\n  };\n\n  QueryStore.prototype.get = function (queryId) {\n    return this.store[queryId];\n  };\n\n  QueryStore.prototype.initQuery = function (query) {\n    var previousQuery = this.store[query.queryId];\n    process.env.NODE_ENV === \"production\" ? invariant(!previousQuery || previousQuery.document === query.document || equal(previousQuery.document, query.document), 41) : invariant(!previousQuery || previousQuery.document === query.document || equal(previousQuery.document, query.document), 'Internal Error: may not update existing query string in store');\n    var isSetVariables = false;\n    var previousVariables = null;\n\n    if (query.storePreviousVariables && previousQuery && previousQuery.networkStatus !== NetworkStatus.loading) {\n      if (!equal(previousQuery.variables, query.variables)) {\n        isSetVariables = true;\n        previousVariables = previousQuery.variables;\n      }\n    }\n\n    var networkStatus;\n\n    if (isSetVariables) {\n      networkStatus = NetworkStatus.setVariables;\n    } else if (query.isPoll) {\n      networkStatus = NetworkStatus.poll;\n    } else if (query.isRefetch) {\n      networkStatus = NetworkStatus.refetch;\n    } else {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    var graphQLErrors = [];\n\n    if (previousQuery && previousQuery.graphQLErrors) {\n      graphQLErrors = previousQuery.graphQLErrors;\n    }\n\n    this.store[query.queryId] = {\n      document: query.document,\n      variables: query.variables,\n      previousVariables: previousVariables,\n      networkError: null,\n      graphQLErrors: graphQLErrors,\n      networkStatus: networkStatus,\n      metadata: query.metadata\n    };\n\n    if (typeof query.fetchMoreForQueryId === 'string' && this.store[query.fetchMoreForQueryId]) {\n      this.store[query.fetchMoreForQueryId].networkStatus = NetworkStatus.fetchMore;\n    }\n  };\n\n  QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n    if (!this.store || !this.store[queryId]) return;\n    this.store[queryId].networkError = null;\n    this.store[queryId].graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n    this.store[queryId].previousVariables = null;\n    this.store[queryId].networkStatus = NetworkStatus.ready;\n\n    if (typeof fetchMoreForQueryId === 'string' && this.store[fetchMoreForQueryId]) {\n      this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n    }\n  };\n\n  QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n    if (!this.store || !this.store[queryId]) return;\n    this.store[queryId].networkError = error;\n    this.store[queryId].networkStatus = NetworkStatus.error;\n\n    if (typeof fetchMoreForQueryId === 'string') {\n      this.markQueryResultClient(fetchMoreForQueryId, true);\n    }\n  };\n\n  QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n    var storeValue = this.store && this.store[queryId];\n\n    if (storeValue) {\n      storeValue.networkError = null;\n      storeValue.previousVariables = null;\n\n      if (complete) {\n        storeValue.networkStatus = NetworkStatus.ready;\n      }\n    }\n  };\n\n  QueryStore.prototype.stopQuery = function (queryId) {\n    delete this.store[queryId];\n  };\n\n  QueryStore.prototype.reset = function (observableQueryIds) {\n    var _this = this;\n\n    Object.keys(this.store).forEach(function (queryId) {\n      if (observableQueryIds.indexOf(queryId) < 0) {\n        _this.stopQuery(queryId);\n      } else {\n        _this.store[queryId].networkStatus = NetworkStatus.loading;\n      }\n    });\n  };\n\n  return QueryStore;\n}();\n\nexport { QueryStore };","map":{"version":3,"sources":["queries.js"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from 'ts-invariant';\nimport { equal } from '@wry/equality';\nimport { NetworkStatus } from '../core/networkStatus';\nimport { isNonEmptyArray } from '../utilities/common/arrays';\nvar QueryStore = (function () {\n    function QueryStore() {\n        this.store = {};\n    }\n    QueryStore.prototype.getStore = function () {\n        return this.store;\n    };\n    QueryStore.prototype.get = function (queryId) {\n        return this.store[queryId];\n    };\n    QueryStore.prototype.initQuery = function (query) {\n        var previousQuery = this.store[query.queryId];\n        invariant(!previousQuery ||\n            previousQuery.document === query.document ||\n            equal(previousQuery.document, query.document), 'Internal Error: may not update existing query string in store');\n        var isSetVariables = false;\n        var previousVariables = null;\n        if (query.storePreviousVariables &&\n            previousQuery &&\n            previousQuery.networkStatus !== NetworkStatus.loading) {\n            if (!equal(previousQuery.variables, query.variables)) {\n                isSetVariables = true;\n                previousVariables = previousQuery.variables;\n            }\n        }\n        var networkStatus;\n        if (isSetVariables) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        else if (query.isPoll) {\n            networkStatus = NetworkStatus.poll;\n        }\n        else if (query.isRefetch) {\n            networkStatus = NetworkStatus.refetch;\n        }\n        else {\n            networkStatus = NetworkStatus.loading;\n        }\n        var graphQLErrors = [];\n        if (previousQuery && previousQuery.graphQLErrors) {\n            graphQLErrors = previousQuery.graphQLErrors;\n        }\n        this.store[query.queryId] = {\n            document: query.document,\n            variables: query.variables,\n            previousVariables: previousVariables,\n            networkError: null,\n            graphQLErrors: graphQLErrors,\n            networkStatus: networkStatus,\n            metadata: query.metadata,\n        };\n        if (typeof query.fetchMoreForQueryId === 'string' &&\n            this.store[query.fetchMoreForQueryId]) {\n            this.store[query.fetchMoreForQueryId].networkStatus =\n                NetworkStatus.fetchMore;\n        }\n    };\n    QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = null;\n        this.store[queryId].graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n        this.store[queryId].previousVariables = null;\n        this.store[queryId].networkStatus = NetworkStatus.ready;\n        if (typeof fetchMoreForQueryId === 'string' &&\n            this.store[fetchMoreForQueryId]) {\n            this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n        }\n    };\n    QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = error;\n        this.store[queryId].networkStatus = NetworkStatus.error;\n        if (typeof fetchMoreForQueryId === 'string') {\n            this.markQueryResultClient(fetchMoreForQueryId, true);\n        }\n    };\n    QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n        var storeValue = this.store && this.store[queryId];\n        if (storeValue) {\n            storeValue.networkError = null;\n            storeValue.previousVariables = null;\n            if (complete) {\n                storeValue.networkStatus = NetworkStatus.ready;\n            }\n        }\n    };\n    QueryStore.prototype.stopQuery = function (queryId) {\n        delete this.store[queryId];\n    };\n    QueryStore.prototype.reset = function (observableQueryIds) {\n        var _this = this;\n        Object.keys(this.store).forEach(function (queryId) {\n            if (observableQueryIds.indexOf(queryId) < 0) {\n                _this.stopQuery(queryId);\n            }\n            else {\n                _this.store[queryId].networkStatus = NetworkStatus.loading;\n            }\n        });\n    };\n    return QueryStore;\n}());\nexport { QueryStore };\n//# sourceMappingURL=queries.js.map"]},"metadata":{},"sourceType":"module"}