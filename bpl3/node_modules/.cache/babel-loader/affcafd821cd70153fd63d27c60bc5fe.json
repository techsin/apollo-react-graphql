{"ast":null,"code":"import _slicedToArray from \"/Users/iacloaner/projs/react-graphql/bpl/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/iacloaner/projs/react-graphql/bpl/src/App.js\";\nimport React, { useState } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { useQuery, gql, useMutation } from '@apollo/client';\n\nfunction App() {\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    className: \"App-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, React.createElement(GetAuhtors, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  })));\n}\n\nconst GET_AUTHORS = gql`\n  {\n    authors {\n      id\n      name\n      books\n    }\n  }\n`;\nconst CHANGE_NAME = gql`\n  mutation AuthorUpdate($id: Int!, $name: String!) {\n    changeName(id: $id, name: $name) {\n    }\n  }\n`;\n\nfunction GetAuhtors() {\n  const _useQuery = useQuery(GET_AUTHORS),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  if (loading) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Loading...\");\n  if (error) return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Error :(\");\n  return data.authors.map(({\n    name,\n    books,\n    id\n  }) => React.createElement(AuthorEle, {\n    name: name,\n    books: books,\n    id: id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }));\n}\n\nfunction AuthorEle({\n  name,\n  books,\n  id\n}) {\n  const _useState = useState(name),\n        inputName = _useState.inputName,\n        setName = _useState.setName;\n\n  const _useMutation = useMutation(CHANGE_NAME),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        addTodo = _useMutation2[0],\n        data = _useMutation2[1].data;\n\n  const handleClick = () => {\n    addTodo(id, inputName);\n    setName('');\n  };\n\n  return React.createElement(\"div\", {\n    key: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, name, \": \", books), React.createElement(\"input\", {\n    value: inputName,\n    onChange: event => setName(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/iacloaner/projs/react-graphql/bpl/src/App.js"],"names":["React","useState","useQuery","gql","useMutation","App","GET_AUTHORS","CHANGE_NAME","GetAuhtors","loading","error","data","authors","map","name","books","id","AuthorEle","inputName","setName","addTodo","handleClick","event","target","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,OAAO,WAAP;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,WAAxB,QAA2C,gBAA3C;;AAEA,SAASC,GAAT,GAAe;AACb,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAOD;;AAED,MAAMC,WAAW,GAAGH,GAAI;;;;;;;;CAAxB;AAUA,MAAMI,WAAW,GAAGJ,GAAI;;;;;CAAxB;;AAQA,SAASK,UAAT,GAAsB;AAAA,oBACaN,QAAQ,CAACI,WAAD,CADrB;AAAA,QACZG,OADY,aACZA,OADY;AAAA,QACHC,KADG,aACHA,KADG;AAAA,QACIC,IADJ,aACIA,IADJ;;AAIpB,MAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAIX,SAAOC,IAAI,CAACC,OAAL,CAAaC,GAAb,CAAiB,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAD,KACpB,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAEF,IAAjB;AAAuB,IAAA,KAAK,EAAEC,KAA9B;AAAqC,IAAA,EAAE,EAAEC,EAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,CAAP;AAGD;;AAED,SAASC,SAAT,CAAmB;AAACH,EAAAA,IAAD;AAAOC,EAAAA,KAAP;AAAcC,EAAAA;AAAd,CAAnB,EAAsC;AAAA,oBACLf,QAAQ,CAACa,IAAD,CADH;AAAA,QAC3BI,SAD2B,aAC3BA,SAD2B;AAAA,QAChBC,OADgB,aAChBA,OADgB;;AAAA,uBAENf,WAAW,CAACG,WAAD,CAFL;AAAA;AAAA,QAE3Ba,OAF2B;AAAA,QAEhBT,IAFgB,oBAEhBA,IAFgB;;AAIlC,QAAMU,WAAW,GAAG,MAAM;AACvBD,IAAAA,OAAO,CAACJ,EAAD,EAAKE,SAAL,CAAP;AACAC,IAAAA,OAAO,CAAC,EAAD,CAAP;AACF,GAHD;;AAKA,SACA;AAAK,IAAA,GAAG,EAAEL,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IADH,QACWC,KADX,CADF,EAIE;AAAO,IAAA,KAAK,EAAEG,SAAd;AAAyB,IAAA,QAAQ,EAAGI,KAAD,IAAWH,OAAO,CAACG,KAAK,CAACC,MAAN,CAAaC,KAAd,CAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKE;AAAQ,IAAA,OAAO,EAAEH,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADA;AAUH;;AAED,eAAehB,GAAf","sourcesContent":["import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { useQuery, gql, useMutation } from '@apollo/client';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <GetAuhtors/>\n      </header>\n    </div>\n  );\n}\n\nconst GET_AUTHORS = gql`\n  {\n    authors {\n      id\n      name\n      books\n    }\n  }\n`;\n\nconst CHANGE_NAME = gql`\n  mutation AuthorUpdate($id: Int!, $name: String!) {\n    changeName(id: $id, name: $name) {\n    }\n  }\n`;\n\n\nfunction GetAuhtors() {\n  const { loading, error, data } = useQuery(GET_AUTHORS);\n\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n\n\n  return data.authors.map(({ name, books, id }) => (\n      <AuthorEle name={name} books={books} id={id}/>\n  ));\n}\n\nfunction AuthorEle({name, books, id}) {\n    const {inputName, setName} = useState(name);\n    const [addTodo, { data }] = useMutation(CHANGE_NAME);\n\n    const handleClick = () => {\n       addTodo(id, inputName);\n       setName('');\n    }\n\n    return (\n    <div key={name}>\n      <p>\n        {name}: {books}\n      </p>\n      <input value={inputName} onChange={(event) => setName(event.target.value)} />\n      <button onClick={handleClick} />\n    </div>\n    );\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}