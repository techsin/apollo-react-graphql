{"ast":null,"code":"import { __assign } from 'tslib';\nimport { requireReactLazily } from '../../react.js';\nimport { getApolloContext } from '../../context/ApolloContext.js';\nimport { QueryData } from '../../data/QueryData.js';\nimport { useDeepMemo } from './useDeepMemo.js';\n\nfunction useBaseQuery(query, options, lazy) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n\n  var React = requireReactLazily();\n  var useContext = React.useContext,\n      useEffect = React.useEffect,\n      useReducer = React.useReducer,\n      useRef = React.useRef;\n  var context = useContext(getApolloContext());\n\n  var _a = useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      tick = _a[0],\n      forceUpdate = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n\n  if (!queryDataRef.current) {\n    queryDataRef.current = new QueryData({\n      options: updatedOptions,\n      context: context,\n      forceUpdate: forceUpdate\n    });\n  }\n\n  var queryData = queryDataRef.current;\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n  var memo = {\n    options: __assign(__assign({}, updatedOptions), {\n      onError: undefined,\n      onCompleted: undefined\n    }),\n    context: context,\n    tick: tick\n  };\n  var result = useDeepMemo(function () {\n    return lazy ? queryData.executeLazy() : queryData.execute();\n  }, memo);\n  var queryResult = lazy ? result[1] : result;\n  useEffect(function () {\n    return queryData.afterExecute({\n      queryResult: queryResult,\n      lazy: lazy\n    });\n  }, [queryResult.loading, queryResult.networkStatus, queryResult.error, queryResult.data]);\n  useEffect(function () {\n    return function () {\n      return queryData.cleanup();\n    };\n  }, []);\n  return result;\n}\n\nexport { useBaseQuery };","map":{"version":3,"sources":["useBaseQuery.js"],"names":[],"mappings":";;;;;;AAKO,SAAS,YAAT,CAAsB,KAAtB,EAA6B,OAA7B,EAAsC,IAAtC,EAA4C;AAC/C,MAAI,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAE,IAAA,IAAI,GAAG,KAAP;AAAe;;AACtC,MAAI,KAAK,GAAG,kBAAkB,EAA9B;AACA,MAAI,UAAU,GAAG,KAAK,CAAC,UAAvB;AAAA,MAAmC,SAAS,GAAG,KAAK,CAAC,SAArD;AAAA,MAAgE,UAAU,GAAG,KAAK,CAAC,UAAnF;AAAA,MAA+F,MAAM,GAAG,KAAK,CAAC,MAA9G;AACA,MAAI,OAAO,GAAG,UAAU,CAAC,gBAAgB,EAAjB,CAAxB;;AACA,MAAI,EAAE,GAAG,UAAU,CAAC,UAAU,CAAV,EAAa;AAAE,WAAO,CAAC,GAAG,CAAX;AAAe,GAA/B,EAAiC,CAAjC,CAAnB;AAAA,MAAwD,IAAI,GAAG,EAAE,CAAC,CAAD,CAAjE;AAAA,MAAsE,WAAW,GAAG,EAAE,CAAC,CAAD,CAAtF;;AACA,MAAI,cAAc,GAAG,OAAO,GAAG,QAAQ,CAAC,QAAQ,CAAC,EAAD,EAAK,OAAL,CAAT,EAAwB;AAAE,IAAA,KAAK,EAAE;AAAT,GAAxB,CAAX,GAAuD;AAAE,IAAA,KAAK,EAAE;AAAT,GAAnF;AACA,MAAI,YAAY,GAAG,MAAM,EAAzB;;AACA,MAAI,CAAC,YAAY,CAAC,OAAlB,EAA2B;AACvB,IAAA,YAAY,CAAC,OAAb,GAAuB,IAAI,SAAJ,CAAc;AACjC,MAAA,OAAO,EAAE,cADwB;AAEjC,MAAA,OAAO,EAAE,OAFwB;AAGjC,MAAA,WAAW,EAAE;AAHoB,KAAd,CAAvB;AAKH;;AACD,MAAI,SAAS,GAAG,YAAY,CAAC,OAA7B;AACA,EAAA,SAAS,CAAC,UAAV,CAAqB,cAArB;AACA,EAAA,SAAS,CAAC,OAAV,GAAoB,OAApB;AACA,MAAI,IAAI,GAAG;AACP,IAAA,OAAO,EAAE,QAAQ,CAAC,QAAQ,CAAC,EAAD,EAAK,cAAL,CAAT,EAA+B;AAAE,MAAA,OAAO,EAAE,SAAX;AAAsB,MAAA,WAAW,EAAE;AAAnC,KAA/B,CADV;AAEP,IAAA,OAAO,EAAE,OAFF;AAGP,IAAA,IAAI,EAAE;AAHC,GAAX;AAKA,MAAI,MAAM,GAAG,WAAW,CAAC,YAAY;AAAE,WAAQ,IAAI,GAAG,SAAS,CAAC,WAAV,EAAH,GAA6B,SAAS,CAAC,OAAV,EAAzC;AAAgE,GAA/E,EAAiF,IAAjF,CAAxB;AACA,MAAI,WAAW,GAAG,IAAI,GAChB,MAAM,CAAC,CAAD,CADU,GAEhB,MAFN;AAGA,EAAA,SAAS,CAAC,YAAY;AAAE,WAAO,SAAS,CAAC,YAAV,CAAuB;AAAE,MAAA,WAAW,EAAE,WAAf;AAA4B,MAAA,IAAI,EAAE;AAAlC,KAAvB,CAAP;AAA0E,GAAzF,EAA2F,CAChG,WAAW,CAAC,OADoF,EAEhG,WAAW,CAAC,aAFoF,EAGhG,WAAW,CAAC,KAHoF,EAIhG,WAAW,CAAC,IAJoF,CAA3F,CAAT;AAMA,EAAA,SAAS,CAAC,YAAY;AAClB,WAAO,YAAY;AAAE,aAAO,SAAS,CAAC,OAAV,EAAP;AAA6B,KAAlD;AACH,GAFQ,EAEN,EAFM,CAAT;AAGA,SAAO,MAAP;AACH","sourcesContent":["import { __assign } from \"tslib\";\nimport { QueryData } from '../../data/QueryData';\nimport { useDeepMemo } from './useDeepMemo';\nimport { getApolloContext } from '../../context/ApolloContext';\nimport { requireReactLazily } from '../../react';\nexport function useBaseQuery(query, options, lazy) {\n    if (lazy === void 0) { lazy = false; }\n    var React = requireReactLazily();\n    var useContext = React.useContext, useEffect = React.useEffect, useReducer = React.useReducer, useRef = React.useRef;\n    var context = useContext(getApolloContext());\n    var _a = useReducer(function (x) { return x + 1; }, 0), tick = _a[0], forceUpdate = _a[1];\n    var updatedOptions = options ? __assign(__assign({}, options), { query: query }) : { query: query };\n    var queryDataRef = useRef();\n    if (!queryDataRef.current) {\n        queryDataRef.current = new QueryData({\n            options: updatedOptions,\n            context: context,\n            forceUpdate: forceUpdate\n        });\n    }\n    var queryData = queryDataRef.current;\n    queryData.setOptions(updatedOptions);\n    queryData.context = context;\n    var memo = {\n        options: __assign(__assign({}, updatedOptions), { onError: undefined, onCompleted: undefined }),\n        context: context,\n        tick: tick\n    };\n    var result = useDeepMemo(function () { return (lazy ? queryData.executeLazy() : queryData.execute()); }, memo);\n    var queryResult = lazy\n        ? result[1]\n        : result;\n    useEffect(function () { return queryData.afterExecute({ queryResult: queryResult, lazy: lazy }); }, [\n        queryResult.loading,\n        queryResult.networkStatus,\n        queryResult.error,\n        queryResult.data\n    ]);\n    useEffect(function () {\n        return function () { return queryData.cleanup(); };\n    }, []);\n    return result;\n}\n//# sourceMappingURL=useBaseQuery.js.map"]},"metadata":{},"sourceType":"module"}