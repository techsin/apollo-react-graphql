{"ast":null,"code":"import { invariant } from 'ts-invariant';\nimport { visit } from 'graphql/language/visitor';\n\nfunction shouldInclude(selection, variables) {\n  if (variables === void 0) {\n    variables = {};\n  }\n\n  return getInclusionDirectives(selection.directives).every(function (_a) {\n    var directive = _a.directive,\n        ifArgument = _a.ifArgument;\n    var evaledValue = false;\n\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables[ifArgument.value.name.value];\n      process.env.NODE_ENV === \"production\" ? invariant(evaledValue !== void 0, 42) : invariant(evaledValue !== void 0, \"Invalid variable referenced in @\" + directive.name.value + \" directive.\");\n    } else {\n      evaledValue = ifArgument.value.value;\n    }\n\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\n\nfunction getDirectiveNames(doc) {\n  var names = [];\n  visit(doc, {\n    Directive: function (node) {\n      names.push(node.name.value);\n    }\n  });\n  return names;\n}\n\nfunction hasDirectives(names, doc) {\n  return getDirectiveNames(doc).some(function (name) {\n    return names.indexOf(name) > -1;\n  });\n}\n\nfunction hasClientExports(document) {\n  return document && hasDirectives(['client'], document) && hasDirectives(['export'], document);\n}\n\nfunction isInclusionDirective(_a) {\n  var value = _a.name.value;\n  return value === 'skip' || value === 'include';\n}\n\nfunction getInclusionDirectives(directives) {\n  return directives ? directives.filter(isInclusionDirective).map(function (directive) {\n    var directiveArguments = directive.arguments;\n    var directiveName = directive.name.value;\n    process.env.NODE_ENV === \"production\" ? invariant(directiveArguments && directiveArguments.length === 1, 43) : invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n    var ifArgument = directiveArguments[0];\n    process.env.NODE_ENV === \"production\" ? invariant(ifArgument.name && ifArgument.name.value === 'if', 44) : invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\" + directiveName + \" directive.\");\n    var ifValue = ifArgument.value;\n    process.env.NODE_ENV === \"production\" ? invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 45) : invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n    return {\n      directive: directive,\n      ifArgument: ifArgument\n    };\n  }) : [];\n}\n\nexport { getDirectiveNames, getInclusionDirectives, hasClientExports, hasDirectives, shouldInclude };","map":{"version":3,"sources":["directives.js"],"names":[],"mappings":";;;AAEO,SAAS,aAAT,CAAuB,SAAvB,EAAkC,SAAlC,EAA6C;AAChD,MAAI,SAAS,KAAK,KAAK,CAAvB,EAA0B;AAAE,IAAA,SAAS,GAAG,EAAZ;AAAiB;;AAC7C,SAAO,sBAAsB,CAAC,SAAS,CAAC,UAAX,CAAtB,CAA6C,KAA7C,CAAmD,UAAU,EAAV,EAAc;AACpE,QAAI,SAAS,GAAG,EAAE,CAAC,SAAnB;AAAA,QAA8B,UAAU,GAAG,EAAE,CAAC,UAA9C;AACA,QAAI,WAAW,GAAG,KAAlB;;AACA,QAAI,UAAU,CAAC,KAAX,CAAiB,IAAjB,KAA0B,UAA9B,EAA0C;AACtC,MAAA,WAAW,GAAG,SAAS,CAAC,UAAU,CAAC,KAAX,CAAiB,IAAjB,CAAsB,KAAvB,CAAvB;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,SAAS,CAAC,WAAW,KAAK,KAAK,CAAtB,EAAyB,EAAzB,CAAjD,GAAgF,SAAS,CAAC,WAAW,KAAK,KAAK,CAAtB,EAAyB,qCAAqC,SAAS,CAAC,IAAV,CAAe,KAApD,GAA4D,aAArF,CAAzF;AACH,KAHD,MAIK;AACD,MAAA,WAAW,GAAG,UAAU,CAAC,KAAX,CAAiB,KAA/B;AACH;;AACD,WAAO,SAAS,CAAC,IAAV,CAAe,KAAf,KAAyB,MAAzB,GAAkC,CAAC,WAAnC,GAAiD,WAAxD;AACH,GAXM,CAAP;AAYH;;AACM,SAAS,iBAAT,CAA2B,GAA3B,EAAgC;AACnC,MAAI,KAAK,GAAG,EAAZ;AACA,EAAA,KAAK,CAAC,GAAD,EAAM;AACP,IAAA,SAAS,EAAE,UAAU,IAAV,EAAgB;AACvB,MAAA,KAAK,CAAC,IAAN,CAAW,IAAI,CAAC,IAAL,CAAU,KAArB;AACH;AAHM,GAAN,CAAL;AAKA,SAAO,KAAP;AACH;;AACM,SAAS,aAAT,CAAuB,KAAvB,EAA8B,GAA9B,EAAmC;AACtC,SAAO,iBAAiB,CAAC,GAAD,CAAjB,CAAuB,IAAvB,CAA4B,UAAU,IAAV,EAAgB;AAAE,WAAO,KAAK,CAAC,OAAN,CAAc,IAAd,IAAsB,CAAC,CAA9B;AAAkC,GAAhF,CAAP;AACH;;AACM,SAAS,gBAAT,CAA0B,QAA1B,EAAoC;AACvC,SAAQ,QAAQ,IACZ,aAAa,CAAC,CAAC,QAAD,CAAD,EAAa,QAAb,CADT,IAEJ,aAAa,CAAC,CAAC,QAAD,CAAD,EAAa,QAAb,CAFjB;AAGH;;AACD,SAAS,oBAAT,CAA8B,EAA9B,EAAkC;AAC9B,MAAI,KAAK,GAAG,EAAE,CAAC,IAAH,CAAQ,KAApB;AACA,SAAO,KAAK,KAAK,MAAV,IAAoB,KAAK,KAAK,SAArC;AACH;;AACM,SAAS,sBAAT,CAAgC,UAAhC,EAA4C;AAC/C,SAAO,UAAU,GAAG,UAAU,CAAC,MAAX,CAAkB,oBAAlB,EAAwC,GAAxC,CAA4C,UAAU,SAAV,EAAqB;AACjF,QAAI,kBAAkB,GAAG,SAAS,CAAC,SAAnC;AACA,QAAI,aAAa,GAAG,SAAS,CAAC,IAAV,CAAe,KAAnC;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,SAAS,CAAC,kBAAkB,IAAI,kBAAkB,CAAC,MAAnB,KAA8B,CAArD,EAAwD,EAAxD,CAAjD,GAA+G,SAAS,CAAC,kBAAkB,IAAI,kBAAkB,CAAC,MAAnB,KAA8B,CAArD,EAAwD,4CAA4C,aAA5C,GAA4D,aAApH,CAAxH;AACA,QAAI,UAAU,GAAG,kBAAkB,CAAC,CAAD,CAAnC;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,SAAS,CAAC,UAAU,CAAC,IAAX,IAAmB,UAAU,CAAC,IAAX,CAAgB,KAAhB,KAA0B,IAA9C,EAAoD,EAApD,CAAjD,GAA2G,SAAS,CAAC,UAAU,CAAC,IAAX,IAAmB,UAAU,CAAC,IAAX,CAAgB,KAAhB,KAA0B,IAA9C,EAAoD,+BAA+B,aAA/B,GAA+C,aAAnG,CAApH;AACA,QAAI,OAAO,GAAG,UAAU,CAAC,KAAzB;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,SAAS,CAAC,OAAO,KACpD,OAAO,CAAC,IAAR,KAAiB,UAAjB,IAA+B,OAAO,CAAC,IAAR,KAAiB,cADI,CAAR,EACqB,EADrB,CAAjD,GAC4E,SAAS,CAAC,OAAO,KACxF,OAAO,CAAC,IAAR,KAAiB,UAAjB,IAA+B,OAAO,CAAC,IAAR,KAAiB,cADwC,CAAR,EACf,uBAAuB,aAAvB,GAAuC,mDADxB,CADrF;AAGA,WAAO;AAAE,MAAA,SAAS,EAAE,SAAb;AAAwB,MAAA,UAAU,EAAE;AAApC,KAAP;AACH,GAXmB,CAAH,GAWZ,EAXL;AAYH","sourcesContent":["import { visit } from 'graphql/language/visitor';\nimport { invariant } from 'ts-invariant';\nexport function shouldInclude(selection, variables) {\n    if (variables === void 0) { variables = {}; }\n    return getInclusionDirectives(selection.directives).every(function (_a) {\n        var directive = _a.directive, ifArgument = _a.ifArgument;\n        var evaledValue = false;\n        if (ifArgument.value.kind === 'Variable') {\n            evaledValue = variables[ifArgument.value.name.value];\n            invariant(evaledValue !== void 0, \"Invalid variable referenced in @\" + directive.name.value + \" directive.\");\n        }\n        else {\n            evaledValue = ifArgument.value.value;\n        }\n        return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n    });\n}\nexport function getDirectiveNames(doc) {\n    var names = [];\n    visit(doc, {\n        Directive: function (node) {\n            names.push(node.name.value);\n        },\n    });\n    return names;\n}\nexport function hasDirectives(names, doc) {\n    return getDirectiveNames(doc).some(function (name) { return names.indexOf(name) > -1; });\n}\nexport function hasClientExports(document) {\n    return (document &&\n        hasDirectives(['client'], document) &&\n        hasDirectives(['export'], document));\n}\nfunction isInclusionDirective(_a) {\n    var value = _a.name.value;\n    return value === 'skip' || value === 'include';\n}\nexport function getInclusionDirectives(directives) {\n    return directives ? directives.filter(isInclusionDirective).map(function (directive) {\n        var directiveArguments = directive.arguments;\n        var directiveName = directive.name.value;\n        invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n        var ifArgument = directiveArguments[0];\n        invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\" + directiveName + \" directive.\");\n        var ifValue = ifArgument.value;\n        invariant(ifValue &&\n            (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n        return { directive: directive, ifArgument: ifArgument };\n    }) : [];\n}\n//# sourceMappingURL=directives.js.map"]},"metadata":{},"sourceType":"module"}